{"ast":null,"code":"var _jsxFileName = \"/Users/sunnygill/Desktop/freightdok/client/src/components/loads/Loads.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getLoads } from \"../../actions/load\";\nimport LoadItem from \"./Loaditem\";\nimport Spinner from \"../layout/Spinner\";\n\nconst Loads = ({\n  getLoads,\n  load: {\n    loads,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getLoads();\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, \" \", loading ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, loads.length > 0 ? loads.map(load => /*#__PURE__*/React.createElement(LoadItem, {\n    key: load._id,\n    load: load,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 35\n    }\n  })) : /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 15\n    }\n  }, \"No loads\")));\n};\n\nLoads.propTypes = {\n  getLoads: PropTypes.func.isRequired,\n  load: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  load: state.load\n});\n\nexport default connect(mapStateToProps, {\n  getLoads\n})(Loads);","map":{"version":3,"sources":["/Users/sunnygill/Desktop/freightdok/client/src/components/loads/Loads.js"],"names":["React","Fragment","useEffect","PropTypes","connect","getLoads","LoadItem","Spinner","Loads","load","loads","loading","length","map","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEH,EAAAA,QAAF;AAAYI,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAlB,CAAD,KAA4C;AACxDT,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEGM,OAAO,gBACN,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,gBAGN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKD,KAAK,CAACE,MAAN,GAAe,CAAf,GACCF,KAAK,CAACG,GAAN,CAAWJ,IAAD,iBAAU,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,IAAI,CAACK,GAApB;AAAyB,IAAA,IAAI,EAAEL,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApB,CADD,gBAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALN,CALJ,CADF;AAkBD,CAvBD;;AAyBAD,KAAK,CAACO,SAAN,GAAkB;AAChBV,EAAAA,QAAQ,EAAEF,SAAS,CAACa,IAAV,CAAeC,UADT;AAEhBR,EAAAA,IAAI,EAAEN,SAAS,CAACe,MAAV,CAAiBD;AAFP,CAAlB;;AAKA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCX,EAAAA,IAAI,EAAEW,KAAK,CAACX;AADsB,CAAZ,CAAxB;;AAIA,eAAeL,OAAO,CAACe,eAAD,EAAkB;AAAEd,EAAAA;AAAF,CAAlB,CAAP,CAAuCG,KAAvC,CAAf","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getLoads } from \"../../actions/load\";\nimport LoadItem from \"./Loaditem\";\nimport Spinner from \"../layout/Spinner\";\n\nconst Loads = ({ getLoads, load: { loads, loading } }) => {\n  useEffect(() => {\n    getLoads();\n  }, []);\n\n  return (\n    <Fragment>\n      {\" \"}\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Fragment>\n\n            {loads.length > 0 ? (\n              loads.map((load) => <LoadItem key={load._id} load={load} />)\n            ) : (\n              <h4>No loads</h4>\n            )}\n          \n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nLoads.propTypes = {\n  getLoads: PropTypes.func.isRequired,\n  load: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  load: state.load,\n});\n\nexport default connect(mapStateToProps, { getLoads })(Loads);\n"]},"metadata":{},"sourceType":"module"}
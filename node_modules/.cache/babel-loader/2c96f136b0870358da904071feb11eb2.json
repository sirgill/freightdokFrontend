{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNotSvg = R.complement(isSvg);\nvar isNotText = R.complement(isText);\n\nvar shouldIterate = function shouldIterate(node) {\n  return isNotSvg(node) && isNotText(node);\n};\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  var mapChild = function mapChild(child) {\n    return resolveTextLayout(child, fontStore);\n  };\n\n  return R.compose(R.evolve({\n    children: R.map(R.when(shouldIterate, mapChild))\n  }), R.when(shouldLayoutText, R.compose(R.converge(R.assoc('lines'), [R.converge(_layoutText.default, [R.identity, R.path(['box', 'width']), R.path(['box', 'height']), R.always(fontStore)]), R.identity]))))(node);\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sunnygill/Dropbox/My Mac (Surinders-MacBook-Pro.local)/Desktop/freightdokFrontend/client/node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","P","_layoutText","isType","propEq","isSvg","Svg","isText","Text","isNotSvg","complement","isNotText","shouldIterate","node","shouldLayoutText","lines","resolveTextLayout","fontStore","mapChild","child","compose","evolve","children","map","when","converge","assoc","identity","path","always","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,CAAC,GAAGL,uBAAuB,CAACD,OAAO,CAAC,uBAAD,CAAR,CAA/B;;AAEA,IAAIO,WAAW,GAAGR,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAxC;;AAEA,IAAIQ,MAAM,GAAGH,CAAC,CAACI,MAAF,CAAS,MAAT,CAAb;AACA,IAAIC,KAAK,GAAGF,MAAM,CAACF,CAAC,CAACK,GAAH,CAAlB;AACA,IAAIC,MAAM,GAAGJ,MAAM,CAACF,CAAC,CAACO,IAAH,CAAnB;AACA,IAAIC,QAAQ,GAAGT,CAAC,CAACU,UAAF,CAAaL,KAAb,CAAf;AACA,IAAIM,SAAS,GAAGX,CAAC,CAACU,UAAF,CAAaH,MAAb,CAAhB;;AAEA,IAAIK,aAAa,GAAG,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC/C,SAAOJ,QAAQ,CAACI,IAAD,CAAR,IAAkBF,SAAS,CAACE,IAAD,CAAlC;AACD,CAFD;;AAIA,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BD,IAA1B,EAAgC;AACrD,SAAON,MAAM,CAACM,IAAD,CAAN,IAAgB,CAACA,IAAI,CAACE,KAA7B;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BH,IAA3B,EAAiCI,SAAjC,EAA4C;AAClE,MAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,WAAOH,iBAAiB,CAACG,KAAD,EAAQF,SAAR,CAAxB;AACD,GAFD;;AAIA,SAAOjB,CAAC,CAACoB,OAAF,CAAUpB,CAAC,CAACqB,MAAF,CAAS;AACxBC,IAAAA,QAAQ,EAAEtB,CAAC,CAACuB,GAAF,CAAMvB,CAAC,CAACwB,IAAF,CAAOZ,aAAP,EAAsBM,QAAtB,CAAN;AADc,GAAT,CAAV,EAEHlB,CAAC,CAACwB,IAAF,CAAOV,gBAAP,EAAyBd,CAAC,CAACoB,OAAF,CAAUpB,CAAC,CAACyB,QAAF,CAAWzB,CAAC,CAAC0B,KAAF,CAAQ,OAAR,CAAX,EAA6B,CAAC1B,CAAC,CAACyB,QAAF,CAAWvB,WAAW,CAACH,OAAvB,EAAgC,CAACC,CAAC,CAAC2B,QAAH,EAAa3B,CAAC,CAAC4B,IAAF,CAAO,CAAC,KAAD,EAAQ,OAAR,CAAP,CAAb,EAAuC5B,CAAC,CAAC4B,IAAF,CAAO,CAAC,KAAD,EAAQ,QAAR,CAAP,CAAvC,EAAkE5B,CAAC,CAAC6B,MAAF,CAASZ,SAAT,CAAlE,CAAhC,CAAD,EAA0HjB,CAAC,CAAC2B,QAA5H,CAA7B,CAAV,CAAzB,CAFG,EAEuMd,IAFvM,CAAP;AAGD,CARD;;AAUA,IAAIiB,QAAQ,GAAGd,iBAAf;AACAnB,OAAO,CAACE,OAAR,GAAkB+B,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNotSvg = R.complement(isSvg);\nvar isNotText = R.complement(isText);\n\nvar shouldIterate = function shouldIterate(node) {\n  return isNotSvg(node) && isNotText(node);\n};\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  var mapChild = function mapChild(child) {\n    return resolveTextLayout(child, fontStore);\n  };\n\n  return R.compose(R.evolve({\n    children: R.map(R.when(shouldIterate, mapChild))\n  }), R.when(shouldLayoutText, R.compose(R.converge(R.assoc('lines'), [R.converge(_layoutText.default, [R.identity, R.path(['box', 'width']), R.path(['box', 'height']), R.always(fontStore)]), R.identity]))))(node);\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_DRIVERS, GET_DRIVER, ADD_DRIVER, PATCH_DRIVER, DELETE_DRIVER, DRIVER_ERROR, DELETE_DRIVER_LOAD } from \"./types.js\"; //get current users drivers\n\nexport const getDrivers = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/drivers/me\");\n    dispatch({\n      type: GET_DRIVERS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //add load\n\nexport const addDriver = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    console.log(\"===================\");\n    const res = await axios.post(\"/api/drivers\", formData, config);\n    dispatch({\n      type: ADD_DRIVER,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Driver Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //patch driver\n\nexport const patchDriverLoads = (driver_id, loads) => async (dispatch, getState) => {\n  try {\n    let drivers = getState().driver.drivers;\n    const res = await axios.patch(`/api/drivers/loads?driver_id=${driver_id}`, {\n      loads: loads\n    });\n    let index = drivers.indexOf(drivers.find(o => o._id === res.data._id));\n\n    if (index !== -1) {\n      drivers[index] = res.data;\n    }\n\n    dispatch({\n      type: PATCH_DRIVER,\n      payload: drivers\n    });\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //delete driver\n\nexport const deleteDriver = driver_id => async (dispatch, getState) => {\n  try {\n    let drivers = getState().driver.drivers;\n    const res = await axios.delete(`/api/drivers/`, {\n      data: {\n        driver_id: driver_id\n      }\n    });\n    let index = drivers.indexOf(drivers.find(o => o._id === res.data._id));\n\n    if (index !== -1) {\n      drivers.splice(index, 1);\n    }\n\n    dispatch({\n      type: DELETE_DRIVER,\n      payload: drivers\n    });\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //delete driver load\n\nexport const deleteDriverLoads = (driver_id, load_id) => async (dispatch, getState) => {\n  try {\n    let drivers = getState().driver.drivers;\n    const res = await axios.delete(`/api/drivers/loads`, {\n      data: {\n        load_id: load_id,\n        driver_id: driver_id\n      }\n    });\n    let index = drivers.indexOf(drivers.find(o => o._id === res.data._id));\n\n    if (index !== -1) {\n      drivers[index] = res.data;\n    }\n\n    dispatch({\n      type: DELETE_DRIVER_LOAD,\n      payload: drivers\n    });\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/sunnygill/Desktop/freightdok/client/src/actions/driver.js"],"names":["axios","setAlert","GET_DRIVERS","GET_DRIVER","ADD_DRIVER","PATCH_DRIVER","DELETE_DRIVER","DRIVER_ERROR","DELETE_DRIVER_LOAD","getDrivers","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addDriver","formData","config","headers","console","log","post","patchDriverLoads","driver_id","loads","getState","drivers","driver","patch","index","indexOf","find","o","_id","deleteDriver","delete","splice","deleteDriverLoads","load_id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_DRIVERS, GET_DRIVER, ADD_DRIVER, PATCH_DRIVER, DELETE_DRIVER, DRIVER_ERROR, DELETE_DRIVER_LOAD } from \"./types.js\";\n\n//get current users drivers\nexport const getDrivers = () => async (dispatch) => {\n  try {\n    const res = await axios.get(\"/api/drivers/me\");\n    dispatch({\n      type: GET_DRIVERS,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//add load\nexport const addDriver = (formData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    console.log(\"===================\")\n    const res = await axios.post(\"/api/drivers\", formData, config);\n\n    dispatch({\n      type: ADD_DRIVER,\n      payload: res.data,\n    });\n\n    dispatch(setAlert(\"Driver Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//patch driver\nexport const patchDriverLoads = (driver_id, loads) => async (dispatch, getState) => {\n  try {\n    let drivers = getState().driver.drivers;\n    const res = await axios.patch(`/api/drivers/loads?driver_id=${driver_id}`, { loads: loads });\n    let index = drivers.indexOf(drivers.find((o) => o._id === res.data._id));\n    if (index !== -1) {\n      drivers[index] = res.data;\n    }\n    dispatch({\n      type: PATCH_DRIVER,\n      payload: drivers,\n    });\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//delete driver\nexport const deleteDriver = (driver_id) => async (dispatch, getState) => {\n  try {\n    let drivers = getState().driver.drivers;\n    const res = await axios.delete(`/api/drivers/`, { data: { driver_id: driver_id } });\n    let index = drivers.indexOf(drivers.find((o) => o._id === res.data._id));\n    if (index !== -1) {\n      drivers.splice(index, 1);\n    }\n    dispatch({\n      type: DELETE_DRIVER,\n      payload: drivers,\n    });\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n\n//delete driver load\nexport const deleteDriverLoads = (driver_id, load_id) => async (dispatch, getState) => {\n  try {\n    let drivers = getState().driver.drivers;\n    const res = await axios.delete(`/api/drivers/loads`, { data: { load_id: load_id, driver_id: driver_id } });\n    let index = drivers.indexOf(drivers.find((o) => o._id === res.data._id));\n    if (index !== -1) {\n      drivers[index] = res.data;\n    }\n    dispatch({\n      type: DELETE_DRIVER_LOAD,\n      payload: drivers,\n    });\n  } catch (err) {\n    dispatch({\n      type: DRIVER_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
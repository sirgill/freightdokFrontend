{"ast":null,"code":"var _jsxFileName = \"/Users/sunnygill/Desktop/freightdok/client/src/components/loads/Loads.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getLoads } from \"../../actions/load\";\nimport LoadItem from \"./Loaditem\";\nimport Spinner from \"../layout/Spinner\";\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst Loads = ({\n  getLoads,\n  load: {\n    loads,\n    loading,\n    loads_pagination,\n    page,\n    rowsPerPage\n  }\n}) => {\n  const {\n    total\n  } = loads_pagination; // const [page, setPage] = React.useState(0);\n  // const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  useEffect(() => {\n    getLoads(page, rowsPerPage);\n  }, []);\n\n  const handleChangePage = (event, newPage) => {\n    // setPage(newPage);\n    getLoads(newPage, rowsPerPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    const limit = event.target.value; // setRowsPerPage(parseInt(limit, 10));\n    // setPage(0);\n\n    getLoads(0, limit);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, \" \", loading ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, loads.length > 0 ? loads.map(l => /*#__PURE__*/React.createElement(LoadItem, {\n    key: l._id,\n    load: l,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 32\n    }\n  })) : /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, \"No loads\"), loads.length > 0 ? /*#__PURE__*/React.createElement(TableFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 15],\n    colSpan: 3,\n    count: total,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    SelectProps: {\n      inputProps: {\n        'aria-label': 'rows per page'\n      },\n      native: true\n    },\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 19\n    }\n  }))) : ''));\n};\n\nLoads.propTypes = {\n  getLoads: PropTypes.func.isRequired,\n  load: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  load: state.load\n});\n\nexport default connect(mapStateToProps, {\n  getLoads\n})(Loads);","map":{"version":3,"sources":["/Users/sunnygill/Desktop/freightdok/client/src/components/loads/Loads.js"],"names":["React","Fragment","useEffect","PropTypes","connect","getLoads","LoadItem","Spinner","TableRow","TableFooter","TablePagination","Loads","load","loads","loading","loads_pagination","page","rowsPerPage","total","handleChangePage","event","newPage","handleChangeRowsPerPage","limit","target","value","length","map","l","_id","inputProps","native","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { getLoads } from \"../../actions/load\";\nimport LoadItem from \"./Loaditem\";\nimport Spinner from \"../layout/Spinner\";\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst Loads = ({ getLoads, load: { loads, loading, loads_pagination, page, rowsPerPage } }) => {\n  const { total } = loads_pagination;\n  // const [page, setPage] = React.useState(0);\n  // const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  useEffect(() => {\n    getLoads(page, rowsPerPage);\n  }, []);\n\n  const handleChangePage = (event, newPage) => {\n    // setPage(newPage);\n    getLoads(newPage, rowsPerPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    const limit = event.target.value;\n    // setRowsPerPage(parseInt(limit, 10));\n    // setPage(0);\n    getLoads(0, limit);\n  };\n\n  return (\n    <Fragment>\n      {\" \"}\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Fragment>\n\n            {loads.length > 0 ? (\n              loads.map((l) => <LoadItem key={l._id} load={l}  />)\n            ) : (\n              <h4>No loads</h4>\n            )}\n\n            {loads.length > 0 ? (\n              <TableFooter>\n                <TableRow>\n                  <TablePagination\n                    rowsPerPageOptions={[5, 10, 15]}\n                    colSpan={3}\n                    count={total}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    SelectProps={{\n                      inputProps: { 'aria-label': 'rows per page' },\n                      native: true,\n                    }}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                  />\n                </TableRow>\n              </TableFooter>): '' }\n          \n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nLoads.propTypes = {\n  getLoads: PropTypes.func.isRequired,\n  load: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  load: state.load,\n});\n\nexport default connect(mapStateToProps, { getLoads })(Loads);\n"]},"metadata":{},"sourceType":"module"}
{"version":3,"sources":["components/users/UsersList.js"],"names":["UsersList","_useSelector","useSelector","state","users","list","loading","page","limit","total","user","auth","dispatch","useDispatch","useEffect","fetchUsers","allowedRolesForDispatch","config","emptyMessage","count","onPageChange","event","newPage","headerCellSx","pt","pb","rowCellPadding","columns","id","label","renderer","_ref","_ref$row$name","row","name","_ref2","_ref2$row","_ref2$row2","_id","email","role","_jsxs","Fragment","children","_jsx","_Button","sx","mr","variant","onClick","selectUserToEdit","includes","color","deleteUser","EnhancedTable","data"],"mappings":"gKAgGeA,UA1FG,WACd,IAAAC,EAA8CC,aAC1C,SAACC,GAAK,OAAKA,EAAMC,KAAK,IADlBC,EAAIJ,EAAJI,KAAMC,EAAOL,EAAPK,QAASC,EAAIN,EAAJM,KAAMC,EAAKP,EAALO,MAAOC,EAAKR,EAALQ,MAG5BC,EAASR,aAAY,SAACC,GAAK,OAAKA,EAAMQ,IAAI,IAA1CD,KACFE,EAAWC,cAEjBC,qBAAU,WACNF,EAASG,aAAYR,GAAOC,GAChC,GAAG,IAEH,IASMQ,EAA0B,CAC5B,SACA,aACA,eACA,WAGEC,EAAS,CACXC,aAAc,WACdX,OACAY,MAAOV,EACPD,QACAY,aArBqB,SAACC,EAAOC,GAC7BV,EAASG,YAAWO,EAAU,GAAId,GACtC,EAoBIe,aAAc,CAAEC,GAAI,EAAGC,GAAI,GAC3BC,eAAgB,UAChBC,QAAS,CACL,CACIC,GAAI,OACJC,MAAO,OACPC,SAAU,SAAAC,GAAA,IAAAC,EAAAD,EAAGE,IAAOC,KAAS,YAAL,IAAAF,EAAG,GAAEA,IAAiB,IAAI,GAEtD,CACIJ,GAAI,QACJC,MAAO,SAEX,CACID,GAAI,OACJC,MAAO,QAEX,CACID,GAAI,UACJC,MAAO,UACPC,SAAU,SAAAK,GAAyC,IAADC,EAAAD,EAArCF,IAAGI,OAAA,IAAAD,EAAyB,CAAC,EAACA,EAAvBE,EAAGD,EAAHC,IAAKC,EAAKF,EAALE,MAAOC,EAAIH,EAAJG,KAC5B,OAAOC,eAACC,WAAQ,CAAAC,SAAA,CACXjC,GAAsB,aAAdA,EAAK8B,KACVI,cAAAC,IAAA,CAAQC,GAAI,CAAEC,GAAI,GAAKC,QAAQ,YAAYC,QAAS,WAChDrC,EAASsC,YAAiB,CAAEZ,MAAKC,QAAOC,SAC5C,EAAEG,SAAC,WAIH3B,EAAwBmC,SAASX,IAC7BI,cAAAC,IAAA,CAAQG,QAAQ,YAAYC,QAAS,WACjCrC,EAASsC,YAAiB,CAAEZ,MAAKC,QAAOC,SAC5C,EAAEG,SAAC,WAKVjC,IACkB,SAAdA,EAAK8B,MAAiC,UAAd9B,EAAK8B,OAChB,aAAd9B,EAAK8B,MACLI,cAAAC,IAAA,CAAQG,QAAQ,YAAYI,MAAM,QAAQH,QAAS,WAC/CrC,EAASyC,YAAWf,GACxB,EAAEK,SAAC,aAIf,KAKZ,OACIC,cAACF,WAAQ,CAAAC,SACLC,cAACU,IAAa,CAAChD,QAASA,EAASiD,KAAMlD,EAAMY,OAAQA,KAGjE,C","file":"static/js/15.797f6d4b.chunk.js","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUsers, selectUserToEdit, deleteUser } from \"../../actions/users\";\r\nimport EnhancedTable from \"../Atoms/table/Table\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nconst UsersList = () => {\r\n    const { list, loading, page, limit, total } = useSelector(\r\n        (state) => state.users\r\n    );\r\n    const { user } = useSelector((state) => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchUsers(+page, +limit));\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        dispatch(fetchUsers(newPage - 1, +limit));\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        const new_limit = event.target.value;\r\n        dispatch(fetchUsers(0, new_limit));\r\n    };\r\n\r\n    const allowedRolesForDispatch = [\r\n        \"driver\",\r\n        \"afterhours\",\r\n        \"load planner\",\r\n        \"support\",\r\n    ];\r\n\r\n    const config = {\r\n        emptyMessage: 'No Users',\r\n        page,\r\n        count: total,\r\n        limit,\r\n        onPageChange: handleChangePage,\r\n        headerCellSx: { pt: 1, pb: 1 },\r\n        rowCellPadding: 'inherit',\r\n        columns: [\r\n            {\r\n                id: 'name',\r\n                label: 'Name',\r\n                renderer: ({ row: { name = '' } }) => name || '--'\r\n            },\r\n            {\r\n                id: 'email',\r\n                label: 'Email'\r\n            },\r\n            {\r\n                id: 'role',\r\n                label: 'Role'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                label: 'Actions',\r\n                renderer: ({ row: { _id, email, role } = {} }) => {\r\n                    return <Fragment>\r\n                        {user && user.role !== \"dispatch\" ? (\r\n                            <Button sx={{ mr: 1 }} variant='contained' onClick={() => {\r\n                                dispatch(selectUserToEdit({ _id, email, role }))\r\n                            }}>\r\n                                Update\r\n                            </Button>\r\n                        ) : (\r\n                            allowedRolesForDispatch.includes(role) && (\r\n                                <Button variant='contained' onClick={() => {\r\n                                    dispatch(selectUserToEdit({ _id, email, role }))\r\n                                }}>\r\n                                    Update\r\n                                </Button>\r\n                            )\r\n                        )}\r\n                        {user &&\r\n                            (user.role === \"user\" || user.role === \"admin\") &&\r\n                            user.role !== \"dispatch\" &&\r\n                            <Button variant='contained' color='error' onClick={() => {\r\n                                dispatch(deleteUser(_id));\r\n                            }}>\r\n                                Delete\r\n                            </Button>}\r\n                    </Fragment>\r\n                }\r\n            },\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <EnhancedTable loading={loading} data={list} config={config} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default UsersList;\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/loadbar/Loadlistbar.js"],"names":["connect","state","load","driver","getLoads","searchLoads","_ref","_ref$load","loads","loads_pagination","page","rowsPerPage","search","resetSearchField","searchText","dispatch","useDispatch","classes","useStyles","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","open","data","_useState4","setOpen","total","_useState5","currPage","_useState6","rawLoades","setRawLoads","_useSelector","useSelector","_useSelector$auth","auth","_useSelector$auth2$us","user","_useSelector$driver","_useSelector$driver2$","drivers","_useSelector2","query","sLoads","sPage","limit","sTotal","useEffect","setTimeout","role","filterredLoads","filter","assignedTo","interval","setInterval","clearInterval","tableConfig","onRowClick","row","rowCellPadding","count","onPageChange","event","newPage","hasDelete","onDelete","id","onDialogClose","deleteLoad","success","columns","label","renderer","_ref2","_ref2$row","_ref2$row2$pickup","pickup","_pickup$","_pickup$$pickupCity","pickupCity","_pickup$$pickupState","pickupState","concat","_ref3","_ref3$row","_ref3$row2$pickup","_pickup2$0$pickupDate","pickupDate","moment","format","_ref4","_ref4$row","_ref4$row2$drop","drop","_drop$","_drop$$dropCity","dropCity","_drop$$dropState","dropState","_ref5","_ref5$row","_ref5$row2$drop","_drop2$0$dropDate","dropDate","_ref6","_ref6$row","_ref6$row2$brokerage","brokerage","emptyState","_ref7","_ref9$user","find","_id","_ref9$user2$name","name","_jsxs","className","table","children","_jsx","EnhancedTable","config","LoadDetailModal","modalEdit","handleClose","selectLoad"],"mappings":"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","file":"static/js/13.a6a63b0b.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport moment from 'moment';\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteLoad, getLoads, searchLoads, selectLoad} from \"../../actions/load\";\r\nimport {useStyles} from \"../HelperCells.js\";\r\nimport EnhancedTable from \"../Atoms/table/Table\";\r\nimport LoadDetailModal from \"../loads/LoadDetailModal\";\r\n\r\nconst Loadlistbar = ({\r\n                         getLoads,\r\n                         searchLoads,\r\n                         load: {loads, loads_pagination, page, rowsPerPage, search},\r\n                         resetSearchField, searchText\r\n                     }) => {\r\n    const dispatch = useDispatch(),\r\n        classes = useStyles();\r\n    // const { query, loads: sLoads, page: sPage, limit, total: sTotal } = search;\r\n    const [loading, setLoading] = useState(true);\r\n    const [open, setOpen] = useState({open: false, data: {}});\r\n    const {total, currPage} = loads_pagination;\r\n    const [rawLoades, setRawLoads] = useState([]);\r\n    const {auth: {user = {}} = {}, driver: {drivers = []} = {}} = useSelector((state) => state),\r\n        {query, loads: sLoads, page: sPage, limit, total: sTotal} = useSelector(state => state.load.search);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n        }, 1000);\r\n        resetSearchField();\r\n        if (searchText) {\r\n            searchLoads(+page, +limit, search, 'loads');\r\n        } else {\r\n            getLoads(page);\r\n        }\r\n        return () => {\r\n            resetSearchField();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (user && user.role === \"load planner\") {\r\n            const filterredLoads = loads.filter((driver) => {\r\n                if (!driver.assignedTo) {\r\n                    return driver;\r\n                }\r\n            });\r\n            setRawLoads(filterredLoads);\r\n        } else if (query) {\r\n            setRawLoads(sLoads)\r\n        } else {\r\n            setRawLoads(loads);\r\n        }\r\n\r\n        //Polling for Loads\r\n        const interval = setInterval(() => {\r\n            getLoads(page);\r\n        }, 3000)\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [loads, sLoads, page]);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        newPage = newPage - 1\r\n        if (query) searchLoads(newPage, limit, query);\r\n        else getLoads(newPage, rowsPerPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        const limit = event.target.value;\r\n        if (query) searchLoads(0, limit, query);\r\n        else getLoads(0, limit);\r\n    };\r\n\r\n    const onDelete = (id, onDialogClose) => {\r\n        dispatch(deleteLoad(id, (success, data) => {\r\n            if(success){\r\n                setTimeout(() => getLoads(page), 500)\r\n                onDialogClose();\r\n            }\r\n        }))\r\n    }\r\n\r\n    const tableConfig = {\r\n        onRowClick: (row) => setOpen({open: true, data: row}),\r\n        rowCellPadding: 'normal',\r\n        count: query ? sTotal : total,\r\n        page: page,\r\n        limit: query ? sPage : rowsPerPage,\r\n        onPageChange: handleChangePage,\r\n        hasDelete: true,\r\n        onDelete,\r\n        columns: [\r\n            {\r\n                id: 'loadNumber',\r\n                label: 'Load Number'\r\n            },\r\n            {\r\n                id: 'pickup',\r\n                label: 'PickUp City/State',\r\n                renderer: ({row: {pickup = []} = {}}) => {\r\n                    const [{pickupCity = '', pickupState = ''}] = pickup;\r\n                    return `${pickupCity}, ${pickupState}`;\r\n                }\r\n            },\r\n            {\r\n                id: 'pickupDate',\r\n                label: 'Pickup Date',\r\n                renderer: ({row: {pickup = []} = {}}) => {\r\n                    const [{pickupDate = ''}] = pickup;\r\n                    return moment(pickupDate).format('MM/DD')\r\n                }\r\n            },\r\n            {\r\n                id: 'dropCity',\r\n                label: 'Drop City/State',\r\n                renderer: ({row: {drop = []} = {}}) => {\r\n                    const [{dropCity = '', dropState = ''}] = drop;\r\n                    return `${dropCity}, ${dropState}`;\r\n                }\r\n            },\r\n            {\r\n                id: 'dropDate',\r\n                label: 'Drop Date',\r\n                renderer: ({row: {drop = []} = {}}) => {\r\n                    const [{dropDate = ''}] = drop;\r\n                    return moment(dropDate).format('MM/DD')\r\n                }\r\n            },\r\n\r\n            {\r\n                id: 'brokerage',\r\n                label: 'Customer',\r\n                renderer: ({row: {brokerage = ''} = {}}) => {\r\n                    return brokerage;\r\n                }\r\n            },\r\n            {\r\n                id: 'rate',\r\n                label: 'Rate',\r\n                emptyState: '--'\r\n            },\r\n            {\r\n                id: 'assignedTo',\r\n                label: 'Assigned To',\r\n                renderer: ({row}) => {\r\n                    const {user} = row || {},\r\n                        {user: {name = ''} = {}} = drivers.find(driver => driver.user && driver.user._id === user) || {};\r\n                    return name;\r\n                }\r\n            },\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <div className={classes.table}>\r\n            <EnhancedTable config={tableConfig} data={rawLoades} loading={loading}/>\r\n            {open.open && <LoadDetailModal\r\n                modalEdit={false}\r\n                open={open.open}\r\n                load={open.data}\r\n                handleClose={() => {\r\n                    setOpen({open: false, data: {}});\r\n                    dispatch(selectLoad());\r\n                }}\r\n                deleteLoad={(_id) => dispatch(deleteLoad(_id))}\r\n            />}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    load: state.load,\r\n    driver: state.driver,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getLoads, searchLoads})(Loadlistbar);\r\n"],"sourceRoot":""}
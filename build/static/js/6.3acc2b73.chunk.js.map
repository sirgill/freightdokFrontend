{"version":3,"sources":["hooks/useFetch.js","views/mybids/bids/constant.js","actions/bid.action.js","views/mybids/bids/BidDetail.js","views/mybids/Mybids.js"],"names":["useFetch","url","callback","arguments","length","undefined","_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useState7","_useState8","isRefetching","setIsRefetching","requestCall","requestGet","uri","showTriggers","then","result","finally","useEffect","refetch","prepareBidDataForNewTrul","row","_ref","_ref$bidAmount","bidAmount","offerStatus","vendorName","_ref$event_data","event_data","_ref$loadDetail","loadDetail","_ref$loadDetail2$clie","client","_ref$loadDetail2$clie3","client_name","_event_data$counter_o","counter_offer","_event_data$counter_o2","_event_data$counter_o3","expired_at","counterOfferId","id","_event_data$offer","offer","external_id","amount","includes","split","Array","isArray","placeNewCounterOffer","_asyncToGenerator","_regeneratorRuntime","mark","_callee","obj","_yield$requestPost","wrap","_context","prev","next","requestPost","getGoUrl","body","sent","t0","stop","_x","_x2","apply","newCounterOfferAction","_ref2","_callee2","payload","_context2","requestPatch","abrupt","_x3","newTrulFinalOfferAction","_ref3","_callee3","_context3","_x4","AmountComponent","value","name","handleChange","setAmount","_jsxs","Fragment","children","_jsx","_IconButton","onClick","disabled","RemoveIcon","className","InputField","label","onChange","e","text","target","type","parseInt","AddIcon","OFFER_STATUS_FINAL","BidDetail","props","_props$location","location","_props$location2$stat","state","history","onCloseUrl","onRefresh","_state$loadNumber","loadNumber","_state$vendorName","bidInput","setBidInput","mutation","useMutation","afterSubmit","isFinalOffer","some","a","equalsIgnoreCase","isCounterOffer","isChRobinson","canProceedToBid","clientName","showDelete","newTrulState","chRobinsonState","_ref2$bidAmount","_ref2$event_data","prepareBidDataForChRobinson","afterUpdate","notification","message","goBack","success","bidAction","action","offerId","mcNumber","MC_NUMBER","carrierMail","CARRIER_EMAIL","status","date","Date","toDateString","time","toTimeString","availableLoadCosts","code","description","units","currencyCode","carrierCode","productionPayload","Number","emptyDateTime","toISOString","sourceCostPerUnit","emptyLocation","rateConfirmation","email","getUserDetail","user","bookChRobinsonLoad","res","catch","err","console","log","push","Modal","_Grid","sx","px","justifyContent","display","onSubmit","style","textAlign","_Typography","fontSize","my","concat","_Stack","gap","direction","_Button","variant","color","bind","_this","Alert","config","open","severity","_Fragment","py","alignItems","uuidv4","offer_amount","memo","MyBids","path","useRouteMatch","useHistory","_useFetch","_useFetch$data","dLoading","_ref$data","bidsData","_ref$totalCount","totalCount","bidIntervals","setInterval","clearInterval","tableConfig","rowCellPadding","emptyMessage","showRefresh","onRowClick","_ref2$vendorName","toLowerCase","onRowClickDataCallback","count","rowStyleCb","bidLevel","borderLeft","columns","renderer","_ref4","_row$vendorName","_row$loadDetail2","_loadDetail$origin","_loadDetail$origin2","_row$loadDetail","origin","city","stateCode","_ref5","stops","_ref6","_ref8","geo","_ref8$city","_ref8$state","_ref9","_row$loadDetail3","_ref10","_ref11","pickup","moment","pickUpByDate","format","_ref12$early_datetime","early_datetime","_ref13$early_datetime","_ref14","_row$vendorName2","_loadDetail$destinati","_loadDetail$destinati2","_ref14$row","_row$loadDetail4","destination","_ref15","_ref18","_ref18$city","_ref18$state","_ref19","_row$loadDetail5","_row$loadDetail7","_row$loadDetail6","deliverBy","_ref20","_ref21","drop","_ref23","_ref24","equipment","_ref24$vendorName","_getParsedLoadEquipme","getParsedLoadEquipment","_getParsedLoadEquipme2","modesString","_getParsedLoadEquipme3","standard","_ref25","weight","pounds","_ref27$weight","_ref27$weight2$pounds","_ref28","_row$loadDetail8","_row$loadDetail9$clie","_ref29","_ref30$offerStatus","isRejected","_ref31","_ref32$vendorName","route","_ref33$offerStatus","stopPropagation","_objectSpread","EnhancedTable","onRefetch","Switch","Route","render","BidDetails","NewTrulLoadDetails","callDetail"],"mappings":"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","file":"static/js/6.3acc2b73.chunk.js","sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport {requestGet} from \"../utils/request\";\r\n\r\nconst useFetch = (url, callback = null) => {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null),\r\n        [isRefetching, setIsRefetching] = useState(false);\r\n\r\n\r\n    function requestCall() {\r\n        requestGet({uri: url, callback, showTriggers: false })\r\n            .then(result => {\r\n                result.data && setData(result.data);\r\n            })\r\n            .finally(() => {\r\n                setLoading(false);\r\n                setIsRefetching(false);\r\n            })\r\n    }\r\n\r\n    function onRefetch() {\r\n        setIsRefetching(true);\r\n        requestCall();\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        setData(null);\r\n        setError(null);\r\n        requestCall();\r\n\r\n    }, [url])\r\n\r\n    return {data, loading, error, refetch: onRefetch, isRefetching}\r\n}\r\n\r\nexport default useFetch;","const prepareBidDataForNewTrul = (row) => {\r\n    const {bidAmount = '', offerStatus, vendorName, event_data = {}, loadDetail: {client: {client_name = ''} = {}} = {}} = row || {};\r\n    const {counter_offer: {expired_at = '', id: counterOfferId} = {}, offer: {external_id} = {}} = event_data;\r\n    const amount = bidAmount.includes(',') ? bidAmount.split(',') : bidAmount\r\n\r\n    return {\r\n        amount: Array.isArray(amount) ? amount[amount.length - 1] : amount,\r\n        offerStatus,\r\n        vendorName,\r\n        external_id,\r\n        expired_at,\r\n        counterOfferId,\r\n        client_name\r\n    }\r\n}\r\n\r\nexport const prepareBidDataForChRobinson = (row) => {\r\n    const {bidAmount = '', offerStatus, vendorName, event_data = {}} = row || {};\r\n\r\n    return {\r\n        amount: bidAmount,\r\n        offerStatus,\r\n        vendorName,\r\n        event_data\r\n    }\r\n}\r\n\r\nexport default prepareBidDataForNewTrul;","import {requestPatch, requestPost} from \"../utils/request\";\r\nimport {getGoUrl} from \"../config\";\r\n\r\nconst placeNewCounterOffer = async (obj, callback) => {\r\n    try {\r\n        const {data} = await requestPost({uri: getGoUrl() + '/newTrulCounterOffer', body: obj});\r\n        if(callback) callback(data)\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nconst newCounterOfferAction = async (payload) => {\r\n    try {\r\n        return await requestPatch({uri: getGoUrl() + '/newtrulUpdateOfferStatus', body: payload})\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nconst newTrulFinalOfferAction = async (payload) => {\r\n    try{\r\n        return await requestPost({uri: getGoUrl() + '/newTrulFinalOffer', body: payload})\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\nexport {\r\n    placeNewCounterOffer,\r\n    newCounterOfferAction,\r\n    newTrulFinalOfferAction,\r\n}","import Modal from \"../../../components/Atoms/Modal\";\r\nimport {Button, Grid, IconButton, Stack, Typography} from \"@mui/material\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport InputField from \"../../../components/Atoms/form/InputField\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport React, {Fragment, memo, useEffect, useState} from \"react\";\r\nimport RemoveIcon from \"@mui/icons-material/Remove\";\r\nimport prepareBidDataForNewTrul, {prepareBidDataForChRobinson} from \"./constant\";\r\nimport {newCounterOfferAction, newTrulFinalOfferAction, placeNewCounterOffer} from \"../../../actions/bid.action\";\r\nimport {CARRIER_EMAIL, MC_NUMBER, productionPayload} from \"../../openBoard/constants\";\r\nimport {notification} from \"../../../actions/alert\";\r\nimport {bookChRobinsonLoad} from \"../../../actions/openBoard.action\";\r\nimport useMutation from \"../../../hooks/useMutation\";\r\nimport {getUserDetail} from \"../../../utils/utils\";\r\nimport Alert from \"../../../components/Atoms/Alert\";\r\n\r\nconst CH_ROBINSON = 'c.h. robinson';\r\n\r\nconst AmountComponent = ({value, name, handleChange}) => {\r\n    const [amount, setAmount] = useState(value)\r\n\r\n    const onSubtract = () => {\r\n        if (amount > 0)\r\n            setAmount(amount - 1)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setAmount(parseInt(amount) + 1)\r\n    }\r\n    const onChange = (e) => {\r\n        const text = e.target.value;\r\n        setAmount(text);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (handleChange) {\r\n            handleChange({name, value: amount})\r\n        }\r\n    }, [amount, name, handleChange]);\r\n\r\n    return <Fragment>\r\n        <IconButton onClick={onSubtract} disabled={amount <= 0}>\r\n            <RemoveIcon/>\r\n        </IconButton>\r\n        <div className='dollarInput'>\r\n            <InputField\r\n                name=\"bidAmount\"\r\n                label=\"Amount ($)\"\r\n                onChange={onChange}\r\n                type=\"number\"\r\n                value={amount}\r\n                className={''}\r\n            />\r\n        </div>\r\n        <IconButton onClick={onAdd}>\r\n            <AddIcon/>\r\n        </IconButton>\r\n    </Fragment>\r\n}\r\n\r\nconst OFFER_STATUS_FINAL = ['final_offer_created', 'accepted']\r\n\r\nconst BidDetail = (props) => {\r\n    const {location: {state = {}} = {}, history, onCloseUrl, onRefresh} = props,\r\n        {loadNumber = '', vendorName = ''} = state;\r\n    const [bidInput, setBidInput] = useState('0.00');\r\n    const {mutation} = useMutation('/api/bid/deleteBidByLoadNumber/' + loadNumber, afterSubmit)\r\n    const [data, setData] = useState({amount: 0}),\r\n        offerStatus = state?.offerStatus || '',\r\n        isFinalOffer = OFFER_STATUS_FINAL.some(a => a.equalsIgnoreCase(offerStatus)) || false,\r\n        isCounterOffer = offerStatus.equalsIgnoreCase(\"COUNTER_OFFER_CREATED\"),\r\n        isChRobinson = vendorName.equalsIgnoreCase('c.h. robinson'),\r\n        canProceedToBid = !!data.offerStatus,\r\n        clientName = data.client_name,\r\n        showDelete = isChRobinson && offerStatus.equalsIgnoreCase('notconsidered');\r\n\r\n\r\n    useEffect(() => {\r\n        if (vendorName.equalsIgnoreCase('new trul')) {\r\n            const newTrulState = prepareBidDataForNewTrul(state);\r\n            setBidInput(newTrulState.amount);\r\n            setData(newTrulState);\r\n        } else if (isChRobinson) {\r\n            const chRobinsonState = prepareBidDataForChRobinson(state);\r\n            setData(chRobinsonState);\r\n            setBidInput(chRobinsonState.amount)\r\n        }\r\n    }, [state, vendorName])\r\n\r\n    const onSubmit = () => {\r\n\r\n    }\r\n\r\n    const onChange = ({value}) => {\r\n        setBidInput(value)\r\n    }\r\n\r\n    const afterUpdate = (data) => {\r\n        if (data.error) {\r\n            notification(data.message, 'error')\r\n        } else {\r\n            history.goBack()\r\n        }\r\n    }\r\n\r\n\r\n    const placeNewBid = () => {\r\n        if (vendorName.equalsIgnoreCase('new trul')) {\r\n            const {counterOfferId} = data;\r\n            const obj = {\r\n                offerId: counterOfferId,\r\n                external_id: uuidv4(),//data.external_id,\r\n                offer_amount: bidInput,\r\n                expired_at: data.expired_at,\r\n                mcNumber: MC_NUMBER,\r\n                carrierMail: CARRIER_EMAIL,\r\n            }\r\n            if (data.offerStatus.equalsIgnoreCase(\"COUNTER_OFFER_CREATED\")) {\r\n                placeNewCounterOffer(obj, afterUpdate);\r\n            }\r\n        }\r\n    }\r\n\r\n    function afterSubmit(success, data) {\r\n        if (success) {\r\n            afterUpdate({});\r\n            notification('Bid success for Load number', loadNumber);\r\n        } else {\r\n            notification(data.message, 'error')\r\n        }\r\n    }\r\n\r\n    const customMessage = () => {\r\n        if (isChRobinson && !canProceedToBid) {\r\n            return <Alert\r\n                config={{\r\n                    open: true, message: 'We are waiting for the response on this bid.', severity: 'info',\r\n                }}\r\n            />\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const checkVisibility = () => {\r\n        if (isChRobinson) {\r\n            return false\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const bidAction = (action = '') => {\r\n        const {counterOfferId} = data;\r\n        const payload = {\r\n            offerId: counterOfferId,\r\n            mcNumber: MC_NUMBER,\r\n            carrierMail: CARRIER_EMAIL,\r\n            status: action,\r\n        }\r\n        if (isFinalOffer) {\r\n            if (vendorName.equalsIgnoreCase(CH_ROBINSON)) {\r\n                if (action === 'reject') {\r\n                    return mutation({}, 'delete');\r\n                }\r\n                const date = new Date().toDateString(),\r\n                    time = new Date().toTimeString(),\r\n                    {\r\n                        type,\r\n                        code,\r\n                        description,\r\n                        units,\r\n                        currencyCode\r\n                    } = state.loadDetail.availableLoadCosts[0] || {};\r\n                const body = {\r\n                    carrierCode: productionPayload.carrierCode,\r\n                    loadNumber: Number(loadNumber),\r\n                    emptyDateTime: new Date(date + \" \" + time).toISOString(),\r\n                    availableLoadCosts: [{\r\n                        type, code, description, units, currencyCode, sourceCostPerUnit: Number(bidInput)\r\n                    }],\r\n                    emptyLocation: {\r\n                        \"city\": \"Greenwood\",\r\n                        \"state\": \"IN\",\r\n                        \"country\": \"NA\",\r\n                        \"zip\": \"46143\"\r\n                    },\r\n                    rateConfirmation: {\r\n                        email: getUserDetail().user.email,\r\n                        name: getUserDetail().user.name\r\n                    }\r\n                }\r\n                return bookChRobinsonLoad(loadNumber, body, afterSubmit);\r\n            } else newTrulFinalOfferAction(payload)\r\n                .then(res => {\r\n                    if (res.data.status === 'error') {\r\n                        notification(res.data.message, 'error')\r\n                    }\r\n                })\r\n                .catch(err => console.log(err))\r\n        } else newCounterOfferAction(payload)\r\n            .then(res => {\r\n                if (res.data.status === 'error') {\r\n                    notification(res.data.message, 'error')\r\n                } else if (res.data.status.equalsIgnoreCase('success')) {\r\n                    if (onRefresh) onRefresh();\r\n                    history.push(onCloseUrl);\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    return <Modal>\r\n        <Grid sx={{px: 3}} justifyContent=\"center\" display=\"flex\">\r\n            <form onSubmit={onSubmit} style={{textAlign: 'center'}} className={'form_bidding'}>\r\n                <Typography sx={{fontSize: 32}}>\r\n                    {clientName || vendorName || '--'}\r\n                </Typography>\r\n                <Typography sx={{fontSize: 32}}>\r\n                    Load Number: {loadNumber}\r\n                </Typography>\r\n                {isFinalOffer && <Typography fontSize={18} sx={{my: 3}}>{`Final Offer: $${data.amount}`}</Typography>}\r\n                {isCounterOffer && <Typography fontSize={18}>{`Offer: $${data.amount}`}</Typography>}\r\n                <Stack gap={2} direction={'row'} justifyContent='center' my={2}>\r\n                    <Button variant='contained' color=\"success\" sx={{px: 5}}\r\n                            onClick={bidAction.bind(this, 'accept')}\r\n                            disabled={!canProceedToBid}\r\n                    >\r\n                        Accept\r\n                    </Button>\r\n                    <Button\r\n                        variant='contained' color=\"error\" sx={{px: 5}}\r\n                        onClick={bidAction.bind(this, 'reject')}\r\n                        disabled={!canProceedToBid}\r\n                    >\r\n                        {showDelete ? \"Delete\" : \"Reject\"}\r\n                    </Button>\r\n                </Stack>\r\n                {customMessage()}\r\n                {!isFinalOffer && checkVisibility() && <>\r\n                    <Typography>OR</Typography>\r\n                    <Stack direction={'row'} sx={{py: 2}} alignItems={'end'} gap={'10px'} justifyContent={'center'}>\r\n                        <AmountComponent value={bidInput} handleChange={onChange}/>\r\n                    </Stack>\r\n                    <Button variant=\"contained\" color=\"primary\" sx={{px: 2, py: .5, fontSize: 14}}\r\n                            onClick={placeNewBid}>\r\n                        {isCounterOffer ? \"Submit Counter\" : 'Submit Bid'}\r\n                    </Button>\r\n                </>}\r\n            </form>\r\n        </Grid>\r\n    </Modal>\r\n}\r\n\r\nexport default memo(BidDetail, () => true)","import React, {Fragment, useEffect} from \"react\";\r\nimport EnhancedTable from \"../../components/Atoms/table/Table\"\r\nimport {Button} from \"@mui/material\";\r\nimport {useHistory, useRouteMatch} from \"react-router\"\r\nimport moment from \"moment\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport BidDetails from \"./bids/BidDetail\";\r\nimport NewTrulLoadDetails from \"../openBoard/NewTrulLoadDetails\";\r\nimport prepareBidDataForNewTrul from \"./bids/constant\";\r\nimport useFetch from \"../../hooks/useFetch\";\r\nimport {getParsedLoadEquipment} from \"../openBoard/constants\";\r\n\r\nconst getBidStatus = (bidLevel) => {\r\n    if (bidLevel === 2) {\r\n        return \"Counter\"\r\n    } else if (bidLevel === 1) {\r\n        return \"Pending\"\r\n    } else {\r\n        return \"Final Offer\"\r\n    }\r\n}\r\n\r\n\r\nconst MyBids = () => {\r\n    const {path} = useRouteMatch()\r\n    const history = useHistory()\r\n    const {data = {}, loading: dLoading, refetch, isRefetching} = useFetch('/api/bid/biddings'),\r\n        {data: bidsData = [], totalCount = 0} = data || {};\r\n\r\n    useEffect(() => {\r\n        //Poll mybids api\r\n        const bidIntervals = setInterval(() => {\r\n            refetch();\r\n        }, 5000);\r\n\r\n        return () => clearInterval(bidIntervals);\r\n    }, [])\r\n\r\n\r\n    const tableConfig = {\r\n        rowCellPadding: \"normal\",\r\n        emptyMessage: \"No Bids Found\",\r\n        showRefresh: true,\r\n        onRowClick: ({\r\n                         loadNumber,\r\n                         vendorName = ''\r\n                     }) => vendorName.toLowerCase() === 'new trul' ? `${path}/newtrul/${loadNumber}` : `${path}/${loadNumber}`,\r\n        onRowClickDataCallback: (row) => row.loadDetail || {},\r\n        count: totalCount,\r\n        rowStyleCb: ({row}) => {\r\n            const {bidLevel, status} = row;\r\n            //to show rejected, bidlevel:1 and status false\r\n            //to show counter offer bid level: 2, status: false\r\n            if (bidLevel === 2) {\r\n                return {\r\n                    borderLeft: '5px solid #ffeaa7'\r\n                }\r\n            } else if (bidLevel === 1) {\r\n                return {\r\n                    borderLeft: !status ? `5px solid #e74c3c` : '5px solid #00b894'\r\n                }\r\n            }\r\n        },\r\n        columns: [\r\n            {\r\n                id: \"loadNumber\",\r\n                label: \"Load Number\",\r\n            },\r\n            {\r\n                id: \"pickup\",\r\n                label: \"Pickup City/State\",\r\n                renderer: ({row}) => {\r\n                    const {loadDetail = {}} = row;\r\n                    if(row.vendorName?.toLowerCase() === 'c.h. robinson'){\r\n                        return `${loadDetail?.origin?.city}, ${loadDetail?.origin?.stateCode}`\r\n                    }\r\n                    const [_, pickup] = row?.loadDetail?.stops || [],\r\n                        {geo} = pickup || {},\r\n                        {city = '', state = ''} = geo || {};\r\n                    if (!city && !state) return '--'\r\n                    return <Fragment>\r\n                        {city}, {state}\r\n                    </Fragment>\r\n                },\r\n            },\r\n            {\r\n                id: \"\",\r\n                label: \"PickUp Date\",\r\n                renderer: ({row}) => {\r\n                    let date;\r\n                    const [_, pickup] = row?.loadDetail?.stops || [{}];\r\n                    if(row.vendorName === 'C.H. Robinson'){\r\n                        return moment(row.loadDetail.pickUpByDate).format(\"M/DD/YYYY\")\r\n                    }\r\n                    else if (pickup) {\r\n                        const {early_datetime = ''} = pickup || {}\r\n                        return early_datetime ? moment(early_datetime).format(\"M/DD/YYYY\") : '--';\r\n                    }\r\n                    const {early_datetime = ''} = pickup || {}\r\n                    date = early_datetime ? moment(early_datetime).format(\"M/DD/YYYY\") : '--';\r\n\r\n                    return <Fragment>{date}</Fragment>;\r\n                },\r\n            },\r\n            {\r\n                id: \"\",\r\n                label: \"Delivery City / State\",\r\n                renderer: ({row = {}}) => {\r\n                    const {loadDetail = {}} = row;\r\n                    if(row.vendorName?.toLowerCase() === 'c.h. robinson'){\r\n                        return `${loadDetail?.destination?.city}, ${loadDetail?.destination?.stateCode}`\r\n                    }\r\n                    const [drop] = loadDetail.stops || [],\r\n                        {geo} = drop || {},\r\n                        {city = '', state = ''} = geo || {};\r\n                    if (!city && !state) return '--'\r\n                    return <Fragment>\r\n                        {city}, {state}\r\n                    </Fragment>\r\n                }\r\n            },\r\n            {\r\n                id: \"deliveryDate\",\r\n                label: \"Delivery Date\",\r\n                renderer: ({row}) => {\r\n                    if(row.loadDetail?.deliverBy){\r\n                        return moment(row.loadDetail?.deliverBy).format(\"M/DD/YYYY\")\r\n                    }\r\n                    const [drop, _] = row?.loadDetail?.stops || [],\r\n                        {early_datetime} = drop || {};\r\n                    return early_datetime ? moment(early_datetime).format(\"M/DD/YYYY\") : '--';\r\n\r\n                },\r\n            },\r\n            {\r\n                id: \"equipment\",\r\n                label: \"Equipment\",\r\n                renderer: ({row}) => {\r\n                    const {equipment, vendorName = ''} = row.loadDetail || {}\r\n                    if(vendorName.toLowerCase()==='chrobinson'){\r\n                        const {modesString = '', standard = ''} = getParsedLoadEquipment(row.loadDetail || {})\r\n                        return (\r\n                            <Fragment>\r\n                                {modesString} {standard}\r\n                            </Fragment>\r\n                        );\r\n                    }\r\n                    if (typeof equipment === 'string')\r\n                        return <Fragment>\r\n                            {equipment}\r\n                        </Fragment>;\r\n                    else return '--';\r\n                }\r\n            },\r\n            {\r\n                id: \"\",\r\n                label: \"Weight\",\r\n                renderer: ({row}) => {\r\n                    const {weight} = row.loadDetail || {};\r\n                    if (typeof weight === \"number\")\r\n                        return <Fragment>\r\n                            {weight} lbs\r\n                        </Fragment>\r\n                        else if(weight?.pounds){\r\n                        let {weight: {pounds = \"\"} = {}} = row.loadDetail || {};\r\n                        if (pounds) pounds = pounds + \" lbs\";\r\n                        return pounds\r\n                    }\r\n                    else return '--';\r\n\r\n                },\r\n            },\r\n            {\r\n                id: \"vendorName\",\r\n                label: \"Company\",\r\n                renderer: ({row}) => {\r\n                    const {loadDetail: {client = {}} = {}} = row;\r\n                    if (client.client_name) {\r\n                        return client.client_name\r\n                    }\r\n                    return row['vendorName'] || '';\r\n                }\r\n            },\r\n            {\r\n                id: \"status\",\r\n                label: \"Bid Status\",\r\n                renderer: ({row}) => {\r\n                    const {offerStatus = ''} = prepareBidDataForNewTrul(row) || {},\r\n                        isRejected = offerStatus.toLowerCase().includes('rejected');\r\n\r\n                    if(row.vendorName === \"C.H. Robinson\" && row.offerStatus){\r\n                        return row.offerStatus;\r\n                    }\r\n                    return (\r\n                        <Fragment>\r\n                            {row.status ? \"Accepted\" : isRejected ? 'Rejected' : getBidStatus(row.bidLevel)}\r\n                        </Fragment>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                id: \"Bidding\",\r\n                label: \"Bid\",\r\n                renderer: ({row}) => {\r\n                    const {vendorName = ''} = row || {}\r\n                    let route = path + `/bid/${row.loadNumber}`;\r\n                    const {offerStatus = ''} = prepareBidDataForNewTrul(row) || {},\r\n                        isCounterOffer = offerStatus.equalsIgnoreCase(\"COUNTER_OFFER_CREATED\"),\r\n                        isFinalOffer = offerStatus.equalsIgnoreCase('final_offer_created'),\r\n                        isRejected = offerStatus.toLowerCase().includes('rejected');\r\n                    if (vendorName.toLowerCase() === 'ch robinson') {\r\n                        // route = path + `/chrobinson/bid/${row.loadNumber}`;\r\n                    }\r\n                    return (\r\n                        <Fragment>\r\n                            {!isRejected && <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    history.push(route, {\r\n                                        ...row,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                View\r\n                            </Button>}\r\n                        </Fragment>\r\n                    );\r\n                },\r\n            },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <EnhancedTable config={tableConfig} data={bidsData} loading={dLoading} onRefetch={refetch} isRefetching={isRefetching} />\r\n            <Switch>\r\n                <Route\r\n                    path={path + '/bid/:loadNumber'}\r\n                    render={(props) => <BidDetails {...props} onCloseUrl={path} onRefresh={refetch} />}\r\n                />\r\n                <Route path={path + \"/newtrul/:loadId\"}\r\n                       render={(props) => <NewTrulLoadDetails {...props} callDetail={false}/>}/>\r\n            </Switch>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default MyBids;\r\n"],"sourceRoot":""}
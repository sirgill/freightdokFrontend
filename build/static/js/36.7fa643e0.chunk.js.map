{"version":3,"sources":["views/businessIntelligence/index.js","../node_modules/@mui/icons-material/Refresh.js","actions/businessIntelligence.action.js"],"names":["CardSection","lazy","BITabs","withRouter","props","canViewCards","UserSettings","getUserPermissionsByDashboardId","sun","moment","subtract","startOf","sat","endOf","isRefetching","useSelector","state","_","get","match","path","history","dispatch","useDispatch","dateRange","setDateRange","useState","startDate","Date","endDate","key","onChange","useCallback","_ref","value","fetchBI","utc","toISOString","useEffect","toDate","fetchBIData","refetch","arguments","length","undefined","_jsxs","_Stack","sx","height","pt","gap","xs","md","overflow","className","children","_Box","textAlign","_jsx","DateRangePicker","label","pickerProps","maxDate","_IconButton","title","onClick","bind","_Refresh","Suspense","fallback","LoadingComponent","basePath","_interopRequireDefault","require","Object","defineProperty","exports","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","options","isRefetch","async","type","IS_BI_REFETCHING","payload","IS_BI_LOADING","uri","concat","BUSINESS_INTELLIGENCE","serialize","data","success","requestGet","FETCH_BI","e","notification","message","getHistoricalPerformance","dateArray","BI_HISTORICAL_PERFORMANCE_LOADING","promiseRequests","map","BUSINESS_INTELLIGENCE_HISTORICAL_PERFORMANCE","fetchHistoricalPerformance","wait","Promise","all","response","i","BI_HISTORICAL_PERFORMANCE","console","log"],"mappings":"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","file":"static/js/36.7fa643e0.chunk.js","sourcesContent":["import {Stack, Box, IconButton} from \"@mui/material\";\r\nimport React, {lazy, Suspense, useCallback, useEffect, useState} from \"react\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {DateRangePicker, LoadingComponent} from \"../../components/Atoms\";\r\nimport moment from \"moment\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport _ from \"lodash\";\r\nimport {fetchBI} from \"../../actions/businessIntelligence.action\";\r\nimport {Refresh} from \"@mui/icons-material\";\r\nimport {UserSettings} from \"../../components/Atoms/client\";\r\n\r\nconst CardSection = lazy(() => import(\"./cardSection/CardSection\"));\r\nconst BITabs = lazy(() => import(\"./BIDashboardTabs/BITabs\"));\r\n\r\nconst BITab = (props) => {\r\n    const {canViewCards} = UserSettings.getUserPermissionsByDashboardId('businessIntelligence');\r\n    const sun = moment().subtract(1, 'weeks').startOf('week');\r\n    const sat = moment().subtract(1, 'weeks').endOf('week');\r\n    const isRefetching = useSelector(state => _.get(state, 'businessIntelligence.isRefetching', false));\r\n    const {match: {path = ''}, history} = props,\r\n        dispatch = useDispatch()\r\n    const [dateRange, setDateRange] = useState({\r\n        startDate: new Date(),\r\n        endDate: new Date(),\r\n        key: 'selection',\r\n    });\r\n\r\n    const onChange =  useCallback(({value}) => {\r\n        const {startDate, endDate} = value;\r\n            dispatch(fetchBI({startDate:moment(startDate).utc(true).toISOString(), endDate: moment(endDate).utc(true).toISOString()}, true ));\r\n            setDateRange({\r\n                ...dateRange,\r\n                startDate: new Date(startDate),\r\n                endDate: new Date(endDate)\r\n            })\r\n    }, [dateRange])\r\n\r\n    useEffect(() => {\r\n        setDateRange({\r\n            key: 'selection',\r\n            startDate: new Date(sun.toDate()),\r\n            endDate: new Date(sat.toDate())\r\n        })\r\n    }, [path, history]);\r\n\r\n    useEffect(() => {\r\n        fetchBIData()\r\n    }, [dateRange]);\r\n\r\n    const fetchBIData = (refetch = false) => {\r\n        dispatch(fetchBI({startDate: sun.toISOString(), endDate: sat.toISOString()}, refetch ));\r\n    }\r\n\r\n    return <Stack sx={{height: '100%', pt: 2, gap: {xs: 2, md: 4}, overflow: 'auto'}} className='dashboardRoot'>\r\n        {canViewCards && <Box sx={{textAlign: 'right'}}>\r\n            <DateRangePicker label='Date Range' value={dateRange} pickerProps={{maxDate: sat.toDate()}} onChange={onChange}/>\r\n            <IconButton title='Refresh' onClick={fetchBIData.bind(null, true)}>\r\n                <Refresh className={(isRefetching) ? 'rotateIcon' : undefined}/>\r\n            </IconButton>\r\n        </Box>}\r\n        <Suspense fallback={<LoadingComponent />}>\r\n            <CardSection/>\r\n        </Suspense>\r\n        <Suspense fallback={<LoadingComponent />}>\r\n            <BITabs basePath={path} dateRange={dateRange} />\r\n        </Suspense>\r\n    </Stack>\r\n}\r\n\r\nexport default withRouter(BITab);","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n}), 'Refresh');\nexports.default = _default;","import {requestGet} from \"../utils/request\";\r\nimport {BUSINESS_INTELLIGENCE, BUSINESS_INTELLIGENCE_HISTORICAL_PERFORMANCE} from \"../config/requestEndpoints\";\r\nimport {serialize, wait} from \"../utils/utils\";\r\nimport {notification} from \"./alert\";\r\nimport {\r\n    IS_BI_LOADING,\r\n    FETCH_BI,\r\n    IS_BI_REFETCHING,\r\n    BI_HISTORICAL_PERFORMANCE,\r\n    BI_HISTORICAL_PERFORMANCE_LOADING\r\n} from \"./types\";\r\n\r\nexport const fetchBI = (options, isRefetch) => async (dispatch) => {\r\n    try {\r\n        isRefetch ? dispatch({type: IS_BI_REFETCHING, payload: true}) : dispatch({type: IS_BI_LOADING, payload: true})\r\n        const uri = `${BUSINESS_INTELLIGENCE}?${serialize(options)}`\r\n        const {data, success} = await requestGet({uri});\r\n\r\n        dispatch({type: FETCH_BI, payload: {data, success}});\r\n        isRefetch ? dispatch({type: IS_BI_REFETCHING, payload: false}) : dispatch({type: IS_BI_LOADING, payload: false})\r\n    } catch (e) {\r\n        notification(e.message, 'error')\r\n        isRefetch ? dispatch({type: IS_BI_REFETCHING, payload: false}) : dispatch({type: IS_BI_LOADING, payload: false})\r\n    }\r\n}\r\n\r\nconst fetchHistoricalPerformance = async (options = {}) => {\r\n    const uri = `${BUSINESS_INTELLIGENCE_HISTORICAL_PERFORMANCE}?${serialize(options)}`\r\n    return requestGet({uri});\r\n}\r\n\r\nexport const getHistoricalPerformance = (dateArray) => async (dispatch) => {\r\n    try {\r\n        dispatch({type: BI_HISTORICAL_PERFORMANCE_LOADING, payload: true})\r\n        const promiseRequests = dateArray.map(async ({startDate, endDate}) => {\r\n            return fetchHistoricalPerformance({startDate: startDate.utc(true).toISOString(), endDate: endDate.utc(true).toISOString()})\r\n        })\r\n        await wait(2000);\r\n        const promise = await Promise.all(promiseRequests);\r\n        const data = promise.map((response, i) => {\r\n            const {success, data} = response;\r\n            if(success && data) {\r\n                return {\r\n                    data,\r\n                    dateRange: dateArray[i]\r\n                };\r\n            } else {\r\n                return []\r\n            }\r\n        })\r\n\r\n        dispatch({ type: BI_HISTORICAL_PERFORMANCE, payload: data })\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n    finally {\r\n        dispatch({type: BI_HISTORICAL_PERFORMANCE_LOADING, payload: false})\r\n    }\r\n}"],"sourceRoot":""}
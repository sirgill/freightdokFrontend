{"version":3,"sources":["components/loads/LoadsStatus.js","actions/driver.js","utils/helper.js","components/loads/styles.js","components/loads/LoadDetailModal.js"],"names":["useStyles","makeStyles","TableContainer","borderBottom","loadSearchbar","textAlign","paddingBottom","LoadsStatus","_ref","resetSearchField","listBarType","dispatch","useDispatch","_useSelector","useSelector","state","load","_useSelector$loads","loads","_useSelector$loads_pa","loads_pagination","_useSelector$loads_pa2","_useSelector$loads_pa3","limit","total","currPage","_useSelector$rowsPerP","rowsPerPage","_useSelector$search","search","_useSelector$search2","query","_useState","page","useState","open","data","_useState2","_slicedToArray","modal","setModal","_useState3","_useState4","loading","setLoading","useEffect","getLoads","setTimeout","resetLoadsSearch","tableConfig","onPageChange","event","newPage","searchLoads","rowCellPadding","parseInt","count","hover","onRowClick","row","columns","id","label","renderer","_ref2","_ref2$row","_ref2$row2$pickup","pickup","_pickup$","_pickupData$pickupCit","pickupCity","_ref3","date","moment","pickUpByDate","isValid","format","_jsx","Fragment","children","_ref4","_ref4$row","_ref4$row2$drop","drop","_drop$","_dropData$dropCity","dropCity","_ref5","deliverBy","_ref6","_getParsedLoadEquipme","getParsedLoadEquipment","_getParsedLoadEquipme2","modesString","_getParsedLoadEquipme3","standard","_jsxs","emptyState","EnhancedTable","config","LoadDetailModal","modalEdit","handleClose","selectLoad","getDrivers","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","_err$response","_err$response2","wrap","_context","prev","next","axios","get","sent","Object","assign","timestamp","Date","type","GET_DRIVERS","payload","t0","console","log","DRIVER_ERROR","msg","response","statusText","status","stop","_x","apply","arguments","addDriver","formData","isEdit","_callee2","error","_context2","headers","post","notification","message","errors","Array","isArray","length","setAlert","_x2","patchDriverLoads","driver_id","_callee3","getState","drivers","index","_context3","driver","patch","concat","indexOf","find","o","_id","PATCH_DRIVER","_x3","_x4","deleteDriver","_callee4","_context4","delete","splice","DELETE_DRIVER","_x5","_x6","deleteDriverLoads","load_id","_callee5","_context5","DELETE_DRIVER_LOAD","_x7","_x8","capitalizeFirstLetter","string","charAt","toUpperCase","slice","changeObjectKey","obj","old_key","new_key","defineProperty","getOwnPropertyDescriptor","theme","root","minWidth","maxWidth","marginBottom","backgroundColor","borderRadius","borderWidth","borderStyle","borderColor","cardcontent","flexDirection","paddingLeft","paddingTop","fontSize","alignItems","h4","margin","padding","loadp","display","playIcon","height","width","marginLeft","textField","color","textFieldDialog","textFieldDialogPickup","textFieldDialogDrop","resize","resizeDialog","newLoad","paper","position","palette","background","boxShadow","shadows","spacing","top","left","transform","overflowY","maxHeight","outline","rootLoadDetailModal","flexGrow","formControl","formInitialState","rate","assignedTo","trailorNumber","rateConfirmation","proofDelivery","accessorials","invoice_created","MenuProps","PaperProps","style","ITEM_HEIGHT","TextPlaceHolder","value","loadNumber","brokerage","user","_ref3$status","_ref3$accessorials","_ref3$bucketFiles","bucketFiles","bktFiles","_","cloneDeep","classes","_React$useState","React","_React$useState2","edit","setEdit","_React$useState3","_objectSpread","_React$useState4","form","setForm","isProcessingAsyncRequest","setIsProcessingAsyncRequest","rateConfirmationRef","useRef","proofDeliveryRef","SelectElement","OutlinedInput","FilledInput","assignedToOptions","map","_ref4$user","_ref5$name","name","_ref5$_id","filter","setupDrivers","resetFileInputs","afterSubmit","isSuccess","handleSubmit","preventDefault","updateLoad","handleOnChange","_event$target","target","_defineProperty","handlePickDropChange","keyToUpdate","childKey","handleDateChange","key","handleFileChange","_ref7","_ref7$target","files","f","current","handleInOutTime","parent_key","child_key","getRole","auth","role","e","alpha","_toConsumableArray","forEach","item","undefined","_item$fileType","fileType","_item$fileLocation","fileLocation","_ref8","_ref8$rateConfirmatio","_ref8$proofDelivery","StaticDataShow","_ref9","heading","_ref9$values","values","_ref9$spacing","_ref9$sxObject","sxObject","_Stack","sx","_Typography","fontWeight","_Fragment","_Modal","onClose","className","direction","justifyContent","mb","_IconButton","_Close","onClick","onSubmit","_Grid","container","xs","pl","pr","sm","FormControl","m","size","fullWidth","InputLabel","_Select","onChange","_ref10","input","notched","disabled","LOAD_STATUSES","_MenuItem","_ref11","labelId","multiple","_ref12","split","_Divider","_Box","_Done","_CircularProgress","green","zIndex","title","_Edit","body","addLoad","_FileCopyOutlined","InputField","labelStyle","mr","placeholder","shipperName","variant","pickupAddress","pickupState","pickupZip","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","pickupDate","renderInput","params","_TextField","TimePicker","in_time","out_time","mt","pickupPo","pickupReference","pickupDeliverNumber","multiline","rows","notes","readOnly","alignItem","_ArrowForwardIos","blue","marginTop","receiverName","dropAddress","dropState","dropZip","dropDate","dropPo","dropReference","dropDeliverNumber","href","htmlFor","ref","_Button","component","getCheckStatusIcon","memo"],"mappings":"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","file":"static/js/20.6b1361ff.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { resetLoadsSearch } from \"../../actions/load.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getLoads, searchLoads, selectLoad } from \"../../actions/load\";\r\nimport EnhancedTable from \"../Atoms/table/Table\";\r\nimport LoadDetailModal from \"./LoadDetailModal\";\r\nimport { getParsedLoadEquipment } from \"../../views/openBoard/constants\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles({\r\n    TableContainer: {\r\n        borderBottom: \"none\",\r\n    },\r\n    loadSearchbar: {\r\n        textAlign: \"right\",\r\n        paddingBottom: 10,\r\n    },\r\n});\r\n\r\nexport default function LoadsStatus({ resetSearchField, listBarType }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch(),\r\n        { loads = [], loads_pagination: { limit = 15, total, currPage } = {}, rowsPerPage = 15,\r\n            search: { query, loads: sLoads, page: sPage, limit: sLimit, total: sTotal } = {} } = useSelector(state => state.load),\r\n        [modal, setModal] = useState({ open: false, data: {} });\r\n    // const { query, loads: sLoads, page: sPage, limit, total: sTotal } = search;\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        dispatch(getLoads())\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n        }, 1000);\r\n        resetSearchField && resetSearchField();\r\n        dispatch(resetLoadsSearch(listBarType));\r\n        return () => {\r\n            resetSearchField && resetSearchField();\r\n            dispatch(resetLoadsSearch(listBarType));\r\n        };\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        if (query)\r\n            dispatch(searchLoads(newPage - 1, limit, query, listBarType));\r\n        else\r\n            dispatch(getLoads(newPage - 1, rowsPerPage, listBarType));\r\n    };\r\n\r\n    const tableConfig = {\r\n        onPageChange: handleChangePage,\r\n        rowCellPadding: 'inherit',\r\n        page: parseInt(currPage) - 1,\r\n        count: total,\r\n        limit,\r\n        hover: true,\r\n        onRowClick: (row) => {\r\n            if (listBarType === 'history') {\r\n                setModal({ open: true, data: row })\r\n            }\r\n        },\r\n        columns: [\r\n            {\r\n                id: 'loadNumber',\r\n                label: 'Load Number'\r\n            },\r\n\r\n            {\r\n                id: 'pickupCity',\r\n                label: 'Pickup City/State',\r\n                renderer: ({ row: { pickup = [] } = {} }) => {\r\n                    const [pickupData = {}] = pickup,\r\n                        { pickupCity = '' } = pickupData;\r\n                    return pickupCity;\r\n                }\r\n            },\r\n            {\r\n                id: \"pickupDate\",\r\n                label: \"Pickup Date\",\r\n                renderer: ({ row }) => {\r\n                    let date = \"\";\r\n                    if (moment(row.pickUpByDate).isValid()) {\r\n                        date = moment(row.pickUpByDate).format(\"M/DD/YYYY\");\r\n                    }\r\n                    return <Fragment>{date}</Fragment>;\r\n                },\r\n            },\r\n            {\r\n                id: 'dropCity',\r\n                label: 'Drop City/State',\r\n                renderer: ({ row: { drop = [] } = {} }) => {\r\n                    const [dropData = {}] = drop,\r\n                        { dropCity = '' } = dropData;\r\n                    // console.log('row for pickup city', row)\r\n                    return dropCity\r\n                }\r\n            },\r\n\r\n            {\r\n                id: \"deliveryDate\",\r\n                label: \"Delivery Date\",\r\n                renderer: ({ row }) => {\r\n                    let date = \"\";\r\n                    if (moment(row.deliverBy).isValid()) {\r\n                        date = moment(row.deliverBy).format(\"M/DD/YYYY\");\r\n                    }\r\n                    return <Fragment>{date}</Fragment>;\r\n                },\r\n            },\r\n            {\r\n                id: \"equipment\",\r\n                label: \"Equipment\",\r\n                renderer: ({ row }) => {\r\n                    const { modesString = '', standard = '' } = getParsedLoadEquipment(row)\r\n                    return (\r\n                        <Fragment>\r\n                            {modesString} {standard}\r\n                        </Fragment>\r\n                    );\r\n                },\r\n            },\r\n\r\n            {\r\n                id: \"company\",\r\n                label: \"Company\",\r\n                renderer: () => {\r\n                    return \"C.H Robinson\"\r\n                },\r\n            },\r\n            {\r\n                id: 'rate',\r\n                label: 'Rate',\r\n                emptyState: '--'\r\n            },\r\n\r\n        ]\r\n    }\r\n    return (\r\n        <div>\r\n            <Fragment>\r\n                <EnhancedTable config={tableConfig} data={loads} loading={loading} />\r\n                {modal.open && <LoadDetailModal\r\n                    listBarType={listBarType}\r\n                    modalEdit={true}\r\n                    open={true}\r\n                    load={modal.data}\r\n                    handleClose={() => {\r\n                        setModal({ open: false, data: {} });\r\n                        // enableEdit(false);\r\n                        selectLoad();\r\n                    }}\r\n                />}\r\n            </Fragment>\r\n            {/*)}*/}\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\nimport {notification, setAlert} from \"./alert\";\r\nimport { GET_DRIVERS, GET_DRIVER, ADD_DRIVER, PATCH_DRIVER, DELETE_DRIVER, DRIVER_ERROR, DELETE_DRIVER_LOAD } from \"./types.js\";\r\n\r\n//get current users drivers\r\nexport const getDrivers = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\"/api/drivers/me\");\r\n    Object.assign(res.data, {timestamp: new Date()})\r\n    dispatch({\r\n      type: GET_DRIVERS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    dispatch({\r\n      type: DRIVER_ERROR,\r\n      payload: { msg: err?.response?.statusText, status: err?.response?.status },\r\n    });\r\n  }\r\n};\r\n\r\n//add load\r\nexport const addDriver = (formData, isEdit) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const res = await axios.post(\"/api/drivers\", formData, config);\r\n\r\n    notification(res.data.message);\r\n    dispatch(getDrivers());\r\n\r\n  } catch (err) {\r\n    let error = err.errors && Array.isArray(err.errors) && err.errors.length ? err.errors[0].msg : err.message;\r\n    dispatch(setAlert( error, \"error\"));\r\n    // dispatch({\r\n    //   type: DRIVER_ERROR,\r\n    //   payload: { msg: err.response.statusText, status: err.response.status },\r\n    // });\r\n  }\r\n};\r\n\r\n//patch driver\r\nexport const patchDriverLoads = (driver_id, loads) => async (dispatch, getState) => {\r\n  try {\r\n    let drivers = getState().driver.drivers;\r\n    const res = await axios.patch(`/api/drivers/loads?driver_id=${driver_id}`, { loads: loads });\r\n    let index = drivers.indexOf(drivers.find((o) => o._id === res.data._id));\r\n    if (index !== -1) {\r\n      drivers[index] = res.data;\r\n    }\r\n    dispatch({\r\n      type: PATCH_DRIVER,\r\n      payload: drivers,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: DRIVER_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n//delete driver\r\nexport const deleteDriver = (driver_id) => async (dispatch, getState) => {\r\n  try {\r\n    let drivers = getState().driver.drivers;\r\n    const res = await axios.delete(`/api/drivers/`, { data: { driver_id: driver_id } });\r\n    let index = drivers.indexOf(drivers.find((o) => o._id === res.data._id));\r\n    if (index !== -1) {\r\n      drivers.splice(index, 1);\r\n    }\r\n    notification('Deleted Successfully')\r\n    dispatch({\r\n      type: DELETE_DRIVER,\r\n      payload: drivers,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: DRIVER_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n//delete driver load\r\nexport const deleteDriverLoads = (driver_id, load_id) => async (dispatch, getState) => {\r\n  try {\r\n    let drivers = getState().driver.drivers;\r\n    const res = await axios.delete(`/api/drivers/loads`, { data: { load_id: load_id, driver_id: driver_id } });\r\n    let index = drivers.indexOf(drivers.find((o) => o._id === res.data._id));\r\n    if (index !== -1) {\r\n      drivers[index] = res.data;\r\n    }\r\n    dispatch({\r\n      type: DELETE_DRIVER_LOAD,\r\n      payload: drivers,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: DRIVER_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n","\r\nexport function capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport const changeObjectKey = (obj, old_key, new_key) => {\r\n    if (old_key !== new_key) {\r\n        Object.defineProperty(obj, new_key,\r\n            Object.getOwnPropertyDescriptor(obj, old_key));\r\n        delete obj[old_key];\r\n    }\r\n    return obj;\r\n}","import { makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\r\nexport const useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // display: \"flex\",\r\n    minWidth: 200,\r\n    maxWidth: 350,\r\n    marginBottom: 10,\r\n    backgroundColor: \"#FFFFFF\",\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    borderStyle: \"solid\",\r\n    borderColor: \"grey\",\r\n    // boxShadow: \"1px 3px 1px #9E9E9E\",\r\n  },\r\n  cardcontent: {\r\n    flexDirection: \"row\",\r\n    wrap: \"wrap\",\r\n    minWidth: 100,\r\n    maxWidth: 150,\r\n    paddingLeft: 20,\r\n    paddingTop: 15,\r\n    paddingBottom: 5,\r\n    \"&:last-child\": {\r\n      paddingBottom: 5,\r\n    },\r\n  },\r\n  pickup: {\r\n    fontSize: 12,\r\n    alignItems: \"center\",\r\n  },\r\n  h4: {\r\n    margin: 0,\r\n    padding: 0,\r\n  },\r\n  loadp: {\r\n    display: \"flex\",\r\n    margin: 0,\r\n    padding: 0,\r\n    paddingLeft: 150,\r\n    alignItems: \"center\",\r\n  },\r\n  playIcon: {\r\n    height: 38,\r\n    width: 30,\r\n    marginLeft: 0,\r\n  },\r\n  textField: {\r\n    \"& input\": {\r\n      color: \"#000000\",\r\n    },\r\n    \"& input:disabled\": {\r\n      color: \"#000000\",\r\n    },\r\n  },\r\n  textFieldDialog: {\r\n    \"& input\": {\r\n      color: \"#000000\",\r\n    },\r\n    \"& input:disabled\": {\r\n      color: \"#000000\",\r\n    },\r\n  },\r\n  textFieldDialogPickup: {\r\n    \"& input\": {\r\n      color: \"#000000\",\r\n    },\r\n    \"& input:disabled\": {\r\n      color: \"#000000\",\r\n    },\r\n    marginLeft: \"75px\",\r\n  },\r\n  textFieldDialogDrop: {\r\n    \"& input\": {\r\n      color: \"#000000\",\r\n    },\r\n    \"& input:disabled\": {\r\n      color: \"#000000\",\r\n    },\r\n    marginLeft: \"25px\",\r\n  },\r\n  resize: {\r\n    fontSize: 13,\r\n  },\r\n  resizeDialog: {\r\n    fontSize: 14,\r\n  },\r\n\r\n  newLoad: {\r\n    margin: 0,\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(1, 2, 3),\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    width: \"80%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    overflowY: \"auto\",\r\n    maxHeight: '90%',\r\n    outline: 'none'\r\n  },\r\n  rootLoadDetailModal: {\r\n    flexGrow: 1,\r\n    flexDirection: \"row\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n}));\r\n","import React, {Fragment, useEffect, useRef, useState} from \"react\";\r\nimport _ from 'lodash'\r\nimport {\r\n  Divider,\r\n  Grid,\r\n  Stack,\r\n  Typography,\r\n  TextField,\r\n  Box,\r\n  MenuItem,\r\n  Button,\r\n  IconButton,\r\n  Select,\r\n  Modal,\r\n  CircularProgress\r\n} from \"@mui/material\";\r\nimport { ArrowForwardIos as ArrowForwardIosIcon, Close as CloseIcon, Edit as EditIcon, Done as DoneIcon } from '@mui/icons-material'\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addLoad, updateLoad } from \"../../actions/load\";\r\nimport moment from \"moment\";\r\nimport { getDrivers } from \"../../actions/driver\";\r\nimport FilledInput from '@mui/material/FilledInput';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport \"./style.css\";\r\nimport { FileCopyOutlined } from \"@mui/icons-material\";\r\nimport { changeObjectKey } from \"../../utils/helper\";\r\nimport { useStyles } from \"./styles\";\r\nimport InputField from \"../Atoms/form/InputField\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport { blue } from \"../layout/ui/Theme\";\r\nimport { getCheckStatusIcon } from \"../../utils/utils\";\r\nimport {LOAD_STATUSES} from \"../constants\";\r\nimport {green} from \"@mui/material/colors\";\r\n\r\n\r\nconst formInitialState = {\r\n  status: \"\",\r\n  rate: \"\",\r\n  assignedTo: null,\r\n  trailorNumber: \"\",\r\n  rateConfirmation: null,\r\n  proofDelivery: null,\r\n  accessorials: [],\r\n  pickup: [],\r\n  drop: [],\r\n  invoice_created: false,\r\n};\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nconst TextPlaceHolder = ({ value }) => (value ? value : \"--\");\r\n\r\nconst LoadDetailModal = ({\r\n  modalEdit,\r\n  open,\r\n  handleClose,\r\n  listBarType,\r\n  load,\r\n}) => {\r\n  let {\r\n    _id,\r\n    brokerage,\r\n    loadNumber,\r\n    rate,\r\n    trailorNumber,\r\n    pickup,\r\n    drop,\r\n    assignedTo = null,\r\n    user,\r\n    status = \"\",\r\n    accessorials = [],\r\n    invoice_created,\r\n    bucketFiles = [],\r\n  } = load || {};\r\n  const bktFiles = _.cloneDeep(bucketFiles)\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const state = useSelector((state) => state);\r\n  const [edit, setEdit] = React.useState(true);\r\n  const [form, setForm] = React.useState({ ...formInitialState });\r\n  const [isProcessingAsyncRequest, setIsProcessingAsyncRequest] = useState(false);\r\n  const rateConfirmationRef = useRef();\r\n  const proofDeliveryRef = useRef(),\r\n    SelectElement = edit ? OutlinedInput : FilledInput;\r\n  const assignedToOptions = state.driver.drivers.map(({ user = {} }) => {\r\n    const { name = '', _id = '' } = user || '';\r\n    return {\r\n      name, _id\r\n    }\r\n  }).filter((driver) => !!driver?._id) || [];\r\n\r\n  useEffect(() => {\r\n    setupDrivers();\r\n    setForm({\r\n      status,\r\n      assignedTo: user,\r\n      accessorials,\r\n      trailorNumber,\r\n      pickup,\r\n      drop,\r\n      rate,\r\n      loadNumber,\r\n      invoice_created,\r\n    });\r\n    resetFileInputs();\r\n  }, []);\r\n  useEffect(() => {\r\n    const drivers = state.driver.drivers;\r\n    if (drivers.length > 0) {\r\n      // console.log(user._id, state.driver.drivers);\r\n      // setForm({ ...form, assignedTo: user });\r\n      // for (let driver of drivers) {\r\n      //     if (driver.loads.length > 0) {\r\n      //         for (let load of driver.loads) {\r\n      //             if (load._id === _id) {\r\n      //                 setForm({ ...form, assignedTo: user._id });\r\n      //             }\r\n      //         }\r\n      //     }\r\n      // }\r\n    }\r\n  }, [state.driver.drivers]);\r\n  useEffect(() => {\r\n    const error = state.load.error;\r\n    if (!error.msg) {\r\n      setEdit(false);\r\n      // if(handleClose) handleClose();\r\n    }\r\n  }, [state.load.error]);\r\n  useEffect(() => {\r\n    if (modalEdit) setEdit(true);\r\n  }, [modalEdit]);\r\n  useEffect(() => {\r\n    if (!state.load.load) {\r\n      // if(handleClose) handleClose();\r\n    }\r\n  }, [state.load.load]);\r\n  const setupDrivers = () => {\r\n    dispatch(getDrivers());\r\n  };\r\n\r\n  const afterSubmit = (isSuccess) => {\r\n    setIsProcessingAsyncRequest(false);\r\n    if(isSuccess) handleClose();\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (form.status !== \"Empty\") {\r\n      form.invoice_created = false;\r\n    }\r\n    setIsProcessingAsyncRequest(true);\r\n    dispatch(updateLoad({ ...form, _id }, listBarType, bktFiles, afterSubmit));\r\n    // resetFileInputs();\r\n  };\r\n  const handleOnChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setForm({ ...form, [name]: value });\r\n  };\r\n\r\n  const handlePickDropChange = (  { target: { value } },  keyToUpdate,  childKey) => {\r\n    if (keyToUpdate === \"pickup\") {\r\n        setForm({...form, pickup: [{...form.pickup[0], [childKey]: value}]});\r\n    }\r\n    else if (keyToUpdate === \"drop\") {\r\n        setForm({...form, drop: [{...form.drop[0], [childKey]: value}]});\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setForm({ ...form, assignedTo: user, status, accessorials, pickup, drop });\r\n    setEdit(false);\r\n    resetFileInputs();\r\n  };\r\n  const handleDateChange = (date, key) => {\r\n    setForm({ ...form, [key]: [{ ...form[key][0], [`${key}Date`]: date }] });\r\n  };\r\n  const handleFileChange = ({ target: { name, files } }) => {\r\n    setForm((f) => ({ ...f, [name]: files || null }));\r\n  };\r\n  const resetFileInputs = () => {\r\n    if (rateConfirmationRef.current) rateConfirmationRef.current.value = \"\";\r\n    if (proofDeliveryRef.current) proofDeliveryRef.current.value = \"\";\r\n  };\r\n  const handleInOutTime = (date, parent_key, child_key) => {\r\n    // parent_key: drop || pickup\r\n    // child_key: in_time || out_time\r\n    setForm((form) => ({\r\n      ...form,\r\n      [parent_key]: [{ ...form[parent_key][0], [child_key]: date }],\r\n    }));\r\n  };\r\n  const getRole = () => {\r\n    try {\r\n      const {\r\n        auth: {\r\n          user: { role },\r\n        },\r\n      } = state;\r\n      return role;\r\n    } catch (e) {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  const createCopy = () => {\r\n    let body = { ...load };\r\n    body = changeObjectKey(body, \"pickup\", \"pickUp\");\r\n    body = changeObjectKey(body, \"drop\", \"dropOff\");\r\n    setIsProcessingAsyncRequest(true);\r\n    dispatch(addLoad(body, afterSubmit));\r\n  };\r\n\r\n  if (bucketFiles.length) {\r\n    const alpha = [...bucketFiles];\r\n    bucketFiles = {};\r\n    alpha.forEach((item = {}) => {\r\n      const { fileType = \"\", fileLocation = \"\" } = item;\r\n      Object.assign(bucketFiles, { [fileType]: fileLocation });\r\n    });\r\n  } else bucketFiles = {};\r\n\r\n  const { rateConfirmation = \"\", proofDelivery = \"\" } = bucketFiles || {};\r\n\r\n  const StaticDataShow = ({ heading, values = [], spacing = 2, sxObject = {} }) => {\r\n    return <Stack spacing={spacing} sx={{ ...sxObject }}>\r\n      <Stack><Typography sx={{ fontWeight: 600, fontSize: 18, textAlign: 'center' }}>{heading}</Typography></Stack>\r\n      {values.map(value => <Stack>\r\n        <TextPlaceHolder value={value} />\r\n      </Stack>)}\r\n    </Stack>\r\n  }\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"server-modal-title\"\r\n      >\r\n        <div className={classes.paper}>\r\n          <Stack direction={'row'} justifyContent={'space-between'} sx={{ mb: 2 }}>\r\n            {/*<DeleteIcon*/}\r\n            {/*    onClick={(e) => deleteLoad(_id, e)}*/}\r\n            {/*    style={{ color: \"rgb(220, 0, 78)\", cursor: \"pointer\" }}*/}\r\n            {/*/>*/}\r\n            <IconButton>\r\n              <CloseIcon\r\n                id=\"server-modal-title\"\r\n                onClick={handleClose}\r\n              />\r\n            </IconButton>\r\n          </Stack>\r\n          <form onSubmit={handleSubmit}>\r\n\r\n            <Grid container spacing={2} className={classes.rootLoadDetailModal}>\r\n              <Grid item xs={12}>\r\n                <Grid container className={classes.rootLoadDetailModal} spacing={2} sx={{ pl: 3, pr: 3 }}>\r\n                  <Grid item xs={12} sm={4}>\r\n                    <FormControl sx={{ m: 1 }} size=\"small\" fullWidth>\r\n                    <InputLabel id=\"multiple-name\">Status</InputLabel>\r\n                      <Select\r\n                          id=\"multiple-name\"\r\n                          name=\"status\"\r\n                          value={form.status}\r\n                          onChange={({ target: { value } }) => setForm({ ...form, status: value, })}\r\n                          input={<SelectElement size='small' label=\"\" notched={false} sx={{  }} />}\r\n                          MenuProps={MenuProps}\r\n                          disabled={!edit || state.auth.user.role === \"driver\"}\r\n                      >\r\n                        {LOAD_STATUSES.map((name) => (\r\n                            <MenuItem\r\n                                key={name.id}\r\n                                value={name.id}\r\n                                // style={getStyles(name, personName, theme)}\r\n                            >\r\n                              {name.label}\r\n                            </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={4}>\r\n                    <FormControl sx={{ m: 1 }} size=\"small\" fullWidth>\r\n                      <InputLabel id=\"multiple-name\">Assigned</InputLabel>\r\n                      <Select\r\n                          id=\"multiple-name\"\r\n                          name=\"assignedTo\"\r\n                          disabled={!edit || state.auth.user.role === \"driver\"}\r\n                          value={form.assignedTo}\r\n                          onChange={({ target: { value } }) => setForm({ ...form, assignedTo: value, })}\r\n                          input={<SelectElement size='small' label=\"\" notched={false} sx={{  }} />}\r\n                          MenuProps={MenuProps}\r\n                      >\r\n                        {assignedToOptions.map((name) => (\r\n                            <MenuItem\r\n                                key={name.name}\r\n                                value={name._id}\r\n                                // style={getStyles(name, personName, theme)}\r\n                            >\r\n                              {name.name}\r\n                            </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={4}>\r\n                    <InputLabel id=\"demo-multiple-name-label\">Accessorials</InputLabel>\r\n                    <FormControl sx={{ m: 0 }} fullWidth>\r\n                      <Select\r\n                        labelId=\"demo-multiple-name-label\"\r\n                        id=\"demo-multiple-name\"\r\n                        multiple\r\n                        value={form.accessorials}\r\n                        onChange={({ target: { value } }) => setForm({ ...form, accessorials: typeof value === 'string' ? value.split(',') : value, })}\r\n                        input={<SelectElement size='small' label=\"\" notched={false} />}\r\n                        MenuProps={MenuProps}\r\n                        disabled={!edit}\r\n                      >\r\n                        {[\r\n                          { id: 'Tonu', label: 'Tonu' },\r\n                          { id: 'Detention', label: 'Detention' },\r\n                          { id: 'Lumper-by-Broker', label: 'Lumper by Broker' },\r\n                          { id: 'Lumper-by-Carrier', label: 'Lumper by Carrier' },\r\n                          { id: 'Layover', label: 'Layover' },\r\n                        ].map((name) => (\r\n                          <MenuItem\r\n                            key={name.id}\r\n                            value={name.id}\r\n                          // style={getStyles(name, personName, theme)}\r\n                          >\r\n                            {name.label}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ m: 2 }}>\r\n                <Divider />\r\n              </Grid>\r\n            </Grid>\r\n            {/********NEW Grid Start***************************************************/}\r\n\r\n            <Grid container>\r\n              <Grid item xs={2} sx={{ display: 'flex' }}>\r\n                <Box sx={{ alignItems: 'end', display: 'flex' }}>\r\n                  {edit ? <Box sx={{position: 'relative'}}>\r\n                        <IconButton onClick={handleSubmit} disabled={isProcessingAsyncRequest}>\r\n                          <DoneIcon\r\n                              fontSize=\"large\"\r\n                              color={isProcessingAsyncRequest ? \"disabled\" : 'primary'}\r\n                          />\r\n                        </IconButton>\r\n                        {isProcessingAsyncRequest && <CircularProgress\r\n                            size={65}\r\n                            sx={{\r\n                              color: green[500],\r\n                              position: 'absolute',\r\n                              top: -6,\r\n                              left: -6,\r\n                              zIndex: 1,\r\n                            }}\r\n                        />}\r\n                      </Box>\r\n                    : <IconButton onClick={() => setEdit(true)} title='Edit' disabled={isProcessingAsyncRequest}>\r\n                      <EditIcon\r\n                        fontSize=\"large\"\r\n                        color={isProcessingAsyncRequest ? \"disabled\" : 'primary'}\r\n                      />\r\n                    </IconButton>}\r\n                  {edit ? <IconButton onClick={handleCancel} disabled={isProcessingAsyncRequest}>\r\n                    <CloseIcon\r\n                      fontSize=\"large\"\r\n                      color={isProcessingAsyncRequest ? \"disabled\" : 'primary'}\r\n                    />\r\n                  </IconButton> : <IconButton onClick={createCopy} title='Create Copy' disabled={isProcessingAsyncRequest}>\r\n                    <FileCopyOutlined\r\n                      fontSize=\"large\"\r\n                      color={isProcessingAsyncRequest ? \"disabled\" : 'primary'}\r\n                    />\r\n                  </IconButton>}\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Grid container>\r\n                  <Grid xs={12} item display={\"flex\"} justifyContent={'center'}>\r\n                    <Stack>\r\n                      <Stack direction={'row'}>\r\n                        {edit ? getRole() &&\r\n                          (getRole() === \"admin\" || getRole() === \"dispatch\") && (\r\n                            <InputField\r\n                              labelStyle={{ fontWeight: 800, fontSize: 18, color: '#03031A' }}\r\n                              id=\"outlined-basic\"\r\n                              name=\"loadNumber\"\r\n                              value={form.loadNumber}\r\n                              onChange={handleOnChange}\r\n                              label={'Load'}\r\n                              direction={'row'}\r\n                            />\r\n                          ) : <Fragment>\r\n                          <Typography sx={{ mr: 1, fontWeight: 600, fontSize: 18 }}>Load</Typography>\r\n                          <Typography item sx={{ fontSize: 18 }}>{loadNumber || '--'}</Typography>\r\n                        </Fragment>}\r\n                      </Stack>\r\n                      <Stack direction='row'>\r\n                        {edit ? getRole() &&\r\n                          (getRole() === \"admin\" || getRole() === \"dispatch\") && (\r\n                            <InputField\r\n                              id=\"outlined-basic\"\r\n                              label=\"Rate\"\r\n                              name=\"rate\"\r\n                              value={form.rate}\r\n                              onChange={handleOnChange}\r\n                              direction={'row'}\r\n                              labelStyle={{ fontWeight: 800, fontSize: 18, color: '#03031A' }}\r\n                            />\r\n                          ) : <Fragment>\r\n                          <Typography sx={{ mr: 1, fontWeight: 600, fontSize: 18 }}>Rate</Typography>\r\n                          <Typography item sx={{ fontSize: 18 }}>{rate || '--'}</Typography>\r\n                        </Fragment>}\r\n                      </Stack>\r\n                    </Stack>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Grid container>\r\n                      {/*CENTER PART*/}\r\n                      <Grid item xs={5}>\r\n                        <Stack sx={{ textAlign: 'center' }}>\r\n                          <Stack>\r\n                            {edit && state.auth.user.role !== \"driver\" ? (\r\n                              <Stack>\r\n                                <InputField\r\n                                  id=\"outlined-basic\"\r\n                                  placeholder=\"Shipper Name\"\r\n                                  value={form.pickup[0] ? form.pickup[0].shipperName : \"\"}\r\n                                  onChange={(event) =>\r\n                                    handlePickDropChange(event, \"pickup\", \"shipperName\")\r\n                                  }\r\n                                />\r\n                                <InputField\r\n                                  id=\"outlined-basic\"\r\n                                  variant=\"outlined\"\r\n                                  placeholder=\"Address\"\r\n                                  value={form.pickup[0] ? form.pickup[0].pickupAddress : \"\"}\r\n                                  onChange={(event) =>\r\n                                    handlePickDropChange(event, \"pickup\", \"pickupAddress\")\r\n                                  }\r\n                                />\r\n                                {edit && state.auth.user.role !== \"driver\" && <Fragment>\r\n                                  <InputField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    placeholder=\"City\"\r\n                                    value={\r\n                                      form.pickup[0] ? form.pickup[0].pickupCity : \"\"\r\n                                    }\r\n                                    onChange={(event) =>\r\n                                      handlePickDropChange(event, \"pickup\", \"pickupCity\")\r\n                                    }\r\n                                  />\r\n                                  <InputField\r\n                                    id=\"outlined-basic\"\r\n                                    placeholder=\"State\"\r\n                                    value={\r\n                                      form.pickup[0] ? form.pickup[0].pickupState : \"\"\r\n                                    }\r\n                                    onChange={(event) =>\r\n                                      handlePickDropChange(event, \"pickup\", \"pickupState\")\r\n                                    }\r\n                                  />\r\n                                  <InputField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    placeholder=\"Zip\"\r\n                                    value={form.pickup[0] ? form.pickup[0].pickupZip : \"\"}\r\n                                    onChange={(event) =>\r\n                                      handlePickDropChange(event, \"pickup\", \"pickupZip\")\r\n                                    }\r\n                                  />\r\n                                </Fragment>}\r\n                              </Stack>\r\n                            ) : <StaticDataShow\r\n                              heading={'Pickup'}\r\n                              values={[\r\n                                form.pickup[0] ? form.pickup[0].pickupAddress : \"\",\r\n                                pickup && pickup[0] ? pickup[0].shipperName : \"\",\r\n                                `${pickup && pickup[0] ? pickup[0].pickupCity : \"\"}, ${pickup && pickup[0] ? pickup[0].pickupState : \"\"}, ${pickup && pickup[0] ? pickup[0].pickupZip : \"\"}`,\r\n                              ]}\r\n                            />}\r\n                          </Stack>\r\n                          <Stack spacing={2}>\r\n                            {edit ? <Grid container spacing={2}>\r\n                              <Grid item xs={12}>\r\n                                <Typography sx={{ fontWeight: 600, fontSize: 18, textAlign: 'center' }}>Pickup Time</Typography>\r\n                              </Grid>\r\n                              <Grid item xs={6}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                  <DatePicker\r\n                                    value={\r\n                                      form.pickup[0] ? form.pickup[0].pickupDate : \"\"\r\n                                    }\r\n                                    onChange={(date) =>\r\n                                      handleDateChange(date, \"pickup\")\r\n                                    }\r\n                                    renderInput={(params) => <TextField {...params} variant='standard' />}\r\n                                  />\r\n                                </LocalizationProvider>\r\n                              </Grid>\r\n                              <Grid item xs={6}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                  <TimePicker\r\n                                    value={\r\n                                      form.pickup[0] ? form.pickup[0].pickupDate : \"\"\r\n                                    }\r\n                                    onChange={(date) =>\r\n                                      handleDateChange(date, \"pickup\")\r\n                                    }\r\n                                    renderInput={(params) => <TextField {...params} variant='standard' />}\r\n                                  />\r\n                                </LocalizationProvider>\r\n                              </Grid>\r\n                              <Grid item xs={6}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                  <TimePicker\r\n                                    label='In Time'\r\n                                    value={form.pickup[0] ? form.pickup[0].in_time : \"\"}\r\n                                    onChange={(date) =>\r\n                                      handleInOutTime(date, \"pickup\", \"in_time\")\r\n                                    }\r\n                                    renderInput={(params) => <TextField {...params} variant='standard' />}\r\n                                  />\r\n                                </LocalizationProvider>\r\n                              </Grid>\r\n                              <Grid item xs={6}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                  <TimePicker\r\n                                    label='Out Time'\r\n                                    value={\r\n                                      form.pickup[0] ? form.pickup[0].out_time : \"\"\r\n                                    }\r\n                                    onChange={(date) =>\r\n                                      handleInOutTime(date, \"pickup\", \"out_time\")\r\n                                    }\r\n                                    renderInput={(params) => <TextField {...params} variant='standard' />}\r\n                                  />\r\n                                </LocalizationProvider>\r\n                              </Grid>\r\n                            </Grid>\r\n                              : <Fragment>\r\n                                <StaticDataShow\r\n                                  spacing={2}\r\n                                  sxObject={{ mt: 2 }}\r\n                                  heading={'Pickup Time'}\r\n                                  values={[\r\n                                    pickup && pickup[0] ? (\r\n                                      moment(pickup[0].pickupDate).format(\"LLL\")\r\n                                    ) : (\r\n                                      \"\"\r\n                                    )\r\n                                  ]}\r\n                                />\r\n                                <Stack direction='row' justifyContent='space-evenly' spacing={2}>\r\n                                  <Stack>\r\n                                    {pickup && pickup[0] && pickup[0].in_time ? (\r\n                                      <Stack sx={{ textAlign: 'left' }}>\r\n                                        <Typography variant='inherit' sx={{ color: '#8898AA', fontSize: 10 }}>In Time: </Typography>\r\n                                        <Box>{moment(pickup[0].in_time).format(\"h:mm A\")}</Box>\r\n                                      </Stack>\r\n                                    ) : (\r\n                                      \"--\"\r\n                                    )}\r\n                                  </Stack>\r\n                                  <Stack>\r\n                                    {pickup && pickup[0] && pickup[0].out_time ? (\r\n                                      <Stack sx={{ textAlign: 'left' }}>\r\n                                        <Typography variant='inherit' sx={{ color: '#8898AA', fontSize: 10 }}>Out Time:</Typography>\r\n                                        <Box>{moment(pickup[0].out_time).format(\"h:mm A\")}</Box>\r\n                                      </Stack>\r\n                                    ) : (\r\n                                      \"--\"\r\n                                    )}\r\n                                  </Stack>\r\n                                </Stack>\r\n                              </Fragment>}\r\n                          </Stack>\r\n                          <Stack spacing={2}>\r\n                            <Grid item xs={12} style={{ textAlign: \"left\", width: '100%' }}>\r\n                              <Stack spacing={2} sx={{ mt: 2, mb: 2 }}>\r\n                                <Stack direction='row' alignItems='center' spacing={1}>\r\n                                  <Typography fontWeight={700}>PO#</Typography>\r\n                                  {edit ?\r\n                                    <InputField\r\n                                        value={form && form.pickup[0] ? form.pickup[0].pickupPo : \"\"}\r\n                                        onChange={(e) => handlePickDropChange(e, 'pickup', 'pickupPo')}\r\n                                    />\r\n                                    : <Typography>{pickup && pickup[0] ? pickup[0].pickupPo : \"\"}</Typography>}\r\n                                </Stack>\r\n                                <Stack direction='row' alignItems={'center'} spacing={1}>\r\n                                  <Typography fontWeight={700}>Reference#</Typography>\r\n                                  {edit ?\r\n                                    <InputField\r\n                                        value={pickup && form.pickup[0] ? form.pickup[0].pickupReference : \"\"}\r\n                                        onChange={(e) => handlePickDropChange(e, 'pickup', 'pickupReference')}\r\n                                    />\r\n                                    : <Typography>{pickup && pickup[0] ? pickup[0].pickupReference : \"\"}</Typography>}\r\n                                </Stack>\r\n                                <Stack direction='row' alignItems='center' spacing={1}>\r\n                                  <Typography fontWeight={700}>Delivery#</Typography>\r\n                                  {edit ?\r\n                                    <InputField\r\n                                        value={pickup && form.pickup[0] ? form.pickup[0].pickupDeliverNumber : \"\"}\r\n                                        onChange={(e) => handlePickDropChange(e, 'pickup', 'pickupDeliverNumber')}\r\n                                    />\r\n                                    : <Typography>{pickup && pickup[0] ? pickup[0].pickupDeliverNumber : \"\"}</Typography>}\r\n                                </Stack>\r\n                              </Stack>\r\n\r\n                              {/* <p>PO Ref# {pickup && pickup[0] ? pickup[0].pickupReference : ''}</p> */}\r\n\r\n                              {state.auth.user.role !== \"driver\" &&\r\n                                <InputField\r\n                                  id=\"outlined-multiline-static\"\r\n                                  placeholder=\"Pickup Notes\"\r\n                                  multiline\r\n                                  rows={2}\r\n                                  type='textarea'\r\n                                  value={form.pickup[0] ? form.pickup[0].notes : \"\"}\r\n                                  onChange={(event) =>\r\n                                    handlePickDropChange(event, \"pickup\", \"notes\")\r\n                                  }\r\n                                  variant=\"outlined\"\r\n                                  readOnly={!edit}\r\n                                />\r\n                              }\r\n                            </Grid>\r\n                          </Stack>\r\n                        </Stack>\r\n                      </Grid>\r\n                      <Grid item xs={2} sx={{ display: 'flex', alignItem: 'center', mt: 5 }}>\r\n                        {/*Arrow*/}\r\n                        <ArrowForwardIosIcon\r\n                          style={{\r\n                            color: blue,\r\n                            marginTop: \"13%\",\r\n                            margin: '0 auto',\r\n                            height: 40,\r\n                            width: 40,\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={5}>\r\n                        {/*DROP*/}\r\n                        <Stack sx={{ textAlign: 'center' }}>\r\n                          {edit ? state.auth.user.role !== \"driver\" && <Fragment>\r\n                            <InputField\r\n                              id=\"outlined-basic\"\r\n                              variant=\"outlined\"\r\n                              placeholder=\"Receiver Name\"\r\n                              value={form.drop[0] ? form.drop[0].receiverName : \"\"}\r\n                              onChange={(event) =>\r\n                                handlePickDropChange(event, \"drop\", \"receiverName\")\r\n                              }\r\n                            />\r\n                            <InputField\r\n                              id=\"outlined-basic\"\r\n                              variant=\"outlined\"\r\n                              placeholder=\"Address\"\r\n                              value={form.drop[0] ? form.drop[0].dropAddress : \"\"}\r\n                              onChange={(event) =>\r\n                                handlePickDropChange(event, \"drop\", \"dropAddress\")\r\n                              }\r\n                            />\r\n                            <InputField\r\n                              id=\"outlined-basic\"\r\n                              variant=\"outlined\"\r\n                              placeholder=\"City\"\r\n                              value={form.drop[0] ? form.drop[0].dropCity : \"\"}\r\n                              onChange={(event) =>\r\n                                handlePickDropChange(event, \"drop\", \"dropCity\")\r\n                              }\r\n                            />\r\n                            <InputField\r\n                              id=\"outlined-basic\"\r\n                              variant=\"outlined\"\r\n                              placeholder=\"State\"\r\n                              value={form.drop[0] ? form.drop[0].dropState : \"\"}\r\n                              onChange={(event) =>\r\n                                handlePickDropChange(event, \"drop\", \"dropState\")\r\n                              }\r\n                            />\r\n                            <InputField\r\n                              id=\"outlined-basic\"\r\n                              variant=\"outlined\"\r\n                              placeholder=\"Zip\"\r\n                              value={form.drop[0] ? form.drop[0].dropZip : \"\"}\r\n                              onChange={(event) =>\r\n                                handlePickDropChange(event, \"drop\", \"dropZip\")\r\n                              }\r\n                            />\r\n                          </Fragment>\r\n                            : <StaticDataShow\r\n                              heading={'Drop'}\r\n                              values={[\r\n                                drop && drop[0] ? drop[0].receiverName : \"\",\r\n                                form.drop[0] ? form.drop[0].dropAddress : \"\",\r\n                                `${drop && drop[0] ? drop[0].dropCity : \"\"},\r\n                                    ${drop && drop[0] ? drop[0].dropState : \"\"},\r\n                                    ${drop && drop[0] ? drop[0].dropZip : \"\"}`\r\n                              ]}\r\n                            />}\r\n                        </Stack>\r\n                        <Stack spacing={2} sx={{ textAlign: 'center' }}>\r\n                          {edit ? <Grid container spacing={2}>\r\n                            <Grid item xs={12}>\r\n                              <Typography sx={{ fontWeight: 600, fontSize: 18, textAlign: 'center' }}>Drop Time</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <DatePicker\r\n                                  value={form.drop[0] ? form.drop[0].dropDate : \"\"}\r\n                                  onChange={(date) => handleDateChange(date, \"drop\")}\r\n                                  renderInput={(params) => <TextField {...params} variant='standard' />}\r\n                                />\r\n                              </LocalizationProvider>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <TimePicker\r\n                                  value={form.drop[0] ? form.drop[0].dropDate : \"\"}\r\n                                  onChange={(date) => handleDateChange(date, \"drop\")}\r\n                                  renderInput={(params) => <TextField {...params} variant='standard' />}\r\n                                />\r\n                              </LocalizationProvider>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <TimePicker\r\n                                  label='In Time'\r\n                                  value={form.drop[0] ? form.drop[0].in_time : \"\"}\r\n                                  onChange={(date) =>\r\n                                    handleInOutTime(date, \"drop\", \"in_time\")\r\n                                  }\r\n                                  renderInput={(params) => <TextField {...params} variant='standard' />}\r\n                                />\r\n                              </LocalizationProvider>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <TimePicker\r\n                                  label='Out Time'\r\n                                  value={form.drop[0] ? form.drop[0].out_time : \"\"}\r\n                                  onChange={(date) =>\r\n                                    handleInOutTime(date, \"drop\", \"out_time\")\r\n                                  }\r\n                                  renderInput={(params) => <TextField {...params} variant='standard' />}\r\n                                />\r\n                              </LocalizationProvider>\r\n                            </Grid>\r\n                          </Grid> :\r\n                            <Fragment>\r\n                              <StaticDataShow\r\n                                spacing={2}\r\n                                sxObject={{ mt: 2 }}\r\n                                heading={'Drop Time'}\r\n                                values={[\r\n                                  drop && drop[0] ? (\r\n                                    moment(drop[0].dropDate).format(\"LLL\")\r\n                                  ) : (\r\n                                    \"\"\r\n                                  )\r\n                                ]}\r\n                              />\r\n                              <Stack direction='row' justifyContent='space-evenly' spacing={1}>\r\n                                <Stack>\r\n                                  {drop && drop[0] && drop[0].in_time ? (\r\n                                    <Stack sx={{ textAlign: 'left' }}>\r\n                                      <Typography variant='inherit' sx={{ color: '#8898AA', fontSize: 10 }}>In Time: </Typography>\r\n                                      <Box>{moment(drop[0].in_time).format(\"h:mm A\")}</Box>\r\n                                    </Stack>\r\n                                  ) : (\r\n                                    \"--\"\r\n                                  )}\r\n                                </Stack>\r\n                                <Stack>\r\n                                  {drop && drop[0] && drop[0].out_time ? (\r\n                                    <Stack sx={{ textAlign: 'left' }}>\r\n                                      <Typography variant='inherit' sx={{ color: '#8898AA', fontSize: 10 }}>Out Time: </Typography>\r\n                                      <Box>{moment(drop[0].out_time).format(\"h:mm A\")}</Box>\r\n                                    </Stack>\r\n                                  ) : (\r\n                                    \"--\"\r\n                                  )}\r\n                                </Stack>\r\n                              </Stack>\r\n                            </Fragment>}\r\n                        </Stack>\r\n                        <Grid item xs={12} sx={{ textAlign: \"left\", mt: 1 }}>\r\n                          <Stack spacing={2} sx={{ mt: 2, mb: 2 }}>\r\n                            <Stack direction='row' alignItems='center' spacing={1}>\r\n                              <Typography fontWeight={700}>PO#</Typography>\r\n                              {edit ?\r\n                                <InputField\r\n                                    dropPo='dropPo'\r\n                                  value={form && form.drop[0] ? form.drop[0].dropPo : \"\"}\r\n                                  onChange={(e) => handlePickDropChange(e, 'drop', 'dropPo')}\r\n                                />\r\n                                : <Typography>{drop && drop[0] ? drop[0].dropPo : \"\"}</Typography>}\r\n                            </Stack>\r\n                            <Stack direction='row' alignItems='center' spacing={1}>\r\n                              <Typography fontWeight={700}>Reference# </Typography>\r\n                              {edit ?\r\n                                <InputField\r\n                                  value={form && form.drop[0] ? form.drop[0].dropReference : \"\"}\r\n                                  onChange={(e) => handlePickDropChange(e, 'drop', 'dropReference')}\r\n                                />\r\n                                : <Typography>{drop && drop[0] ? drop[0].dropReference : \"\"}</Typography>}\r\n                            </Stack>\r\n                            <Stack direction='row' alignItems='center' spacing={1}>\r\n                              <Typography fontWeight={700}>Deliver# </Typography>\r\n                              {edit ?\r\n                                <InputField\r\n                                  value={form && form.drop[0] ? form.drop[0].dropDeliverNumber : \"\"}\r\n                                  onChange={(e) => handlePickDropChange(e, 'drop', 'dropDeliverNumber')}\r\n                                />\r\n                                : <Typography>{drop && drop[0] ? drop[0].dropDeliverNumber : \"\"}</Typography>}\r\n                            </Stack>\r\n                          </Stack>\r\n\r\n                          {/* <p>Deliver Ref#  {drop && drop[0] ? drop[0].dropReference : ''}</p> */}\r\n\r\n                          {state.auth.user.role !== \"driver\" && (\r\n                            <InputField\r\n                              id=\"outlined-multiline-static\"\r\n                              placeholder=\"Drop Notes\"\r\n                              multiline\r\n                              rows={2}\r\n                              type=\"textarea\"\r\n                              value={form.drop[0] ? form.drop[0].notes : \"\"}\r\n                              onChange={(event) =>\r\n                                handlePickDropChange(event, \"drop\", \"notes\")\r\n                              }\r\n                              variant=\"outlined\"\r\n                              readOnly={!edit}\r\n                            />\r\n                          )}\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={2} sx={{ display: 'flex', alignItems: 'end', justifyContent: 'flex-end' }}>\r\n                <Stack spacing={2} sx={{ alignItems: 'end' }}>\r\n                  <Stack style={{ margin: 0 }} direction={'row'} spacing={2}>\r\n                    {rateConfirmation ? (\r\n                      <span>\r\n                        <a href={rateConfirmation} target=\"_blank\">\r\n                          Rate Con\r\n                        </a>\r\n                      </span>\r\n                    ) : (\r\n                      <span>Rate Con</span>\r\n                    )}\r\n                    <span>\r\n                      {edit ? <Fragment>\r\n                        <label htmlFor=\"contained-button-file1\">\r\n                          <input\r\n                            style={{ display: 'none' }}\r\n                            type=\"file\"\r\n                            multiple\r\n                            name=\"rateConfirmation\"\r\n                            disabled={!edit || state.auth.user.role === \"driver\"}\r\n                            onChange={handleFileChange}\r\n                            ref={rateConfirmationRef}\r\n                            id=\"contained-button-file1\"\r\n                          />\r\n                          <Button variant=\"outlined\" component=\"span\" size='small'>\r\n                            Attach\r\n                          </Button>\r\n                        </label>\r\n                      </Fragment>\r\n                        : getCheckStatusIcon(!!rateConfirmation)}\r\n                    </span>\r\n                  </Stack>\r\n                  <Stack style={{ margin: 0 }} direction={'row'} spacing={2}>\r\n                    {proofDelivery ? (\r\n                      <span>\r\n                        <a href={proofDelivery} target=\"_blank\">\r\n                          POD\r\n                        </a>\r\n                      </span>\r\n                    ) : (\r\n                      <span>POD</span>\r\n                    )}\r\n                    <span>\r\n                      {edit ?\r\n                        <label htmlFor=\"contained-button-file2\">\r\n                          <input\r\n                            style={{ display: 'none' }}\r\n                            type=\"file\"\r\n                            multiple\r\n                            name=\"proofDelivery\"\r\n                            disabled={!edit}\r\n                            onChange={handleFileChange}\r\n                            ref={proofDeliveryRef}\r\n                            id=\"contained-button-file2\"\r\n                          />\r\n                          <Button variant=\"outlined\" component=\"span\" size='small'>\r\n                            Attach\r\n                          </Button>\r\n                        </label>\r\n                        : getCheckStatusIcon(!!proofDelivery)}\r\n                    </span>\r\n                  </Stack>\r\n                  <Stack style={{ margin: 0 }} direction={'row'} spacing={2}>\r\n                    {accessorials.length ? (\r\n                      <span>\r\n                        <a href={\"#\"} target=\"_blank\">\r\n                          Accessorials\r\n                        </a>\r\n                      </span>\r\n                    ) : (\r\n                      <span>Accessorials</span>\r\n                    )}\r\n                    <span>\r\n                      {edit ? <Fragment>\r\n                        <label htmlFor=\"contained-button-file3\">\r\n                          <input\r\n                            style={{ display: 'none' }}\r\n                            type=\"file\"\r\n                            multiple\r\n                            name=\"accessorials\"\r\n                            disabled={!edit || state.auth.user.role === \"driver\"}\r\n                            onChange={handleFileChange}\r\n                            ref={rateConfirmationRef}\r\n                            id=\"contained-button-file3\"\r\n                          />\r\n                          <Button variant=\"outlined\" component=\"span\" size='small'>\r\n                            Attach\r\n                          </Button>\r\n                        </label>\r\n                      </Fragment>\r\n                        : getCheckStatusIcon(!!accessorials?.length)}\r\n                    </span>\r\n                  </Stack>\r\n                </Stack>\r\n              </Grid>\r\n            </Grid>\r\n            {/*******************NEW Grid END***********************************/}\r\n\r\n\r\n\r\n\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              className={classes.rootLoadDetailModal}\r\n              style={{ marginTop: 10 }}\r\n            >\r\n              <Grid item xs={1}></Grid>\r\n              <Grid item xs={4} justifyContent={'center'} sx={{ textAlign: 'center' }}>\r\n                {/*<Typography item sx={{fontWeight: 600, fontSize:18, textAlign: 'center'}}>Pickup</Typography>*/}\r\n                {/*<p>*/}\r\n                {/*  {edit && state.auth.user.role !== \"driver\" ? (*/}\r\n                {/*    <InputField*/}\r\n                {/*      id=\"outlined-basic\"*/}\r\n                {/*      variant=\"outlined\"*/}\r\n                {/*      placeholder=\"Address\"*/}\r\n                {/*      value={form.pickup[0] ? form.pickup[0].pickupAddress : \"\"}*/}\r\n                {/*      onChange={(event) =>*/}\r\n                {/*        handlePickDropChange(event, \"pickup\", \"pickupAddress\")*/}\r\n                {/*      }*/}\r\n                {/*    />*/}\r\n                {/*  ) : (*/}\r\n                {/*    <TextPlaceHolder*/}\r\n                {/*      value={pickup && pickup[0] ? pickup[0].pickupAddress : \"\"}*/}\r\n                {/*    />*/}\r\n                {/*  )}*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*  {edit && state.auth.user.role !== \"driver\" ? (*/}\r\n                {/*    <Grid*/}\r\n                {/*      container*/}\r\n                {/*      spacing={2}*/}\r\n                {/*      className={classes.rootLoadDetailModal}*/}\r\n                {/*    >*/}\r\n                {/*      <Grid item xs={4}>*/}\r\n                {/*        <InputField*/}\r\n                {/*          id=\"outlined-basic\"*/}\r\n                {/*          variant=\"outlined\"*/}\r\n                {/*          placeholder=\"City\"*/}\r\n                {/*          value={*/}\r\n                {/*            form.pickup[0] ? form.pickup[0].pickupCity : \"\"*/}\r\n                {/*          }*/}\r\n                {/*          onChange={(event) =>*/}\r\n                {/*            handlePickDropChange(event, \"pickup\", \"pickupCity\")*/}\r\n                {/*          }*/}\r\n                {/*        />*/}\r\n                {/*      </Grid>*/}\r\n                {/*      <Grid item xs={4}>*/}\r\n                {/*        <InputField*/}\r\n                {/*          id=\"outlined-basic\"*/}\r\n                {/*          placeholder=\"State\"*/}\r\n                {/*          value={*/}\r\n                {/*            form.pickup[0] ? form.pickup[0].pickupState : \"\"*/}\r\n                {/*          }*/}\r\n                {/*          onChange={(event) =>*/}\r\n                {/*            handlePickDropChange(event, \"pickup\", \"pickupState\")*/}\r\n                {/*          }*/}\r\n                {/*        />*/}\r\n                {/*      </Grid>*/}\r\n                {/*      <Grid item xs={4}>*/}\r\n                {/*        <InputField*/}\r\n                {/*          id=\"outlined-basic\"*/}\r\n                {/*          variant=\"outlined\"*/}\r\n                {/*          placeholder=\"Zip\"*/}\r\n                {/*          value={form.pickup[0] ? form.pickup[0].pickupZip : \"\"}*/}\r\n                {/*          onChange={(event) =>*/}\r\n                {/*            handlePickDropChange(event, \"pickup\", \"pickupZip\")*/}\r\n                {/*          }*/}\r\n                {/*        />*/}\r\n                {/*      </Grid>*/}\r\n                {/*    </Grid>*/}\r\n                {/*  ) : (*/}\r\n                {/*    <>*/}\r\n                {/*      <TextPlaceHolder*/}\r\n                {/*        value={pickup && pickup[0] ? pickup[0].pickupCity : \"\"}*/}\r\n                {/*      />*/}\r\n                {/*      ,*/}\r\n                {/*      <TextPlaceHolder*/}\r\n                {/*        value={pickup && pickup[0] ? pickup[0].pickupState : \"\"}*/}\r\n                {/*      />*/}\r\n                {/*      ,*/}\r\n                {/*      <TextPlaceHolder*/}\r\n                {/*        value={pickup && pickup[0] ? pickup[0].pickupZip : \"\"}*/}\r\n                {/*      />*/}\r\n                {/*    </>*/}\r\n                {/*  )}*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*  <Typography sx={{fontWeight:600, mb:1, textAlign: 'center'}}>Pickup Time</Typography>*/}\r\n                {/*  {edit && state.auth.user.role !== \"driver\" ? (*/}\r\n                {/*    <Grid container>*/}\r\n                {/*      <Grid item xs={6}>*/}\r\n                {/*        <MuiPickersUtilsProvider utils={DateFnsUtils}>*/}\r\n                {/*          <KeyboardTimePicker*/}\r\n                {/*            className={classes.textFieldDialog}*/}\r\n                {/*            InputProps={{*/}\r\n                {/*              classes: { input: classes.resizeDialog },*/}\r\n                {/*            }}*/}\r\n                {/*            size=\"small\"*/}\r\n                {/*            id=\"time-picker\"*/}\r\n                {/*            value={*/}\r\n                {/*              form.pickup[0] ? form.pickup[0].pickupDate : \"\"*/}\r\n                {/*            }*/}\r\n                {/*            onChange={(date) =>*/}\r\n                {/*              handleDateChange(date, \"pickup\")*/}\r\n                {/*            }*/}\r\n                {/*          />*/}\r\n                {/*        </MuiPickersUtilsProvider>*/}\r\n                {/*      </Grid>*/}\r\n                {/*      <Grid item xs={6}>*/}\r\n                {/*        <MuiPickersUtilsProvider utils={DateFnsUtils}>*/}\r\n                {/*          <KeyboardDatePicker*/}\r\n                {/*            className={classes.textFieldDialog}*/}\r\n                {/*            InputProps={{*/}\r\n                {/*              classes: { input: classes.resizeDialog },*/}\r\n                {/*            }}*/}\r\n                {/*            size=\"small\"*/}\r\n                {/*            id=\"date-picker-dialog\"*/}\r\n                {/*            format=\"MM/dd/yyyy\"*/}\r\n                {/*            value={*/}\r\n                {/*              form.pickup[0] ? form.pickup[0].pickupDate : \"\"*/}\r\n                {/*            }*/}\r\n                {/*            onChange={(date) =>*/}\r\n                {/*              handleDateChange(date, \"pickup\")*/}\r\n                {/*            }*/}\r\n                {/*          />*/}\r\n                {/*        </MuiPickersUtilsProvider>*/}\r\n                {/*      </Grid>*/}\r\n                {/*    </Grid>*/}\r\n                {/*  ) : pickup && pickup[0] ? (*/}\r\n                {/*    moment(pickup[0].pickupDate).format(\"LLL\")*/}\r\n                {/*  ) : (*/}\r\n                {/*    \"\"*/}\r\n                {/*  )}*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*  <Grid container>*/}\r\n                {/*    <Grid item xs={6}>*/}\r\n                {/*      {edit ? (*/}\r\n                {/*        <MuiPickersUtilsProvider utils={DateFnsUtils}>*/}\r\n                {/*          <KeyboardTimePicker*/}\r\n                {/*            label=\"In Time\"*/}\r\n                {/*            className={classes.textFieldDialog}*/}\r\n                {/*            InputProps={{*/}\r\n                {/*              classes: { input: classes.resizeDialog },*/}\r\n                {/*            }}*/}\r\n                {/*            size=\"small\"*/}\r\n                {/*            id=\"time-picker\"*/}\r\n                {/*            value={form.pickup[0] ? form.pickup[0].in_time : \"\"}*/}\r\n                {/*            onChange={(date) =>*/}\r\n                {/*              handleInOutTime(date, \"pickup\", \"in_time\")*/}\r\n                {/*            }*/}\r\n                {/*          />*/}\r\n                {/*        </MuiPickersUtilsProvider>*/}\r\n                {/*      ) : pickup && pickup[0] && pickup[0].in_time ? (*/}\r\n                {/*        \"In time: \" + moment(pickup[0].in_time).format(\"h:mm A\")*/}\r\n                {/*      ) : (*/}\r\n                {/*        \"--\"*/}\r\n                {/*      )}*/}\r\n                {/*    </Grid>*/}\r\n                {/*    <Grid item xs={6}>*/}\r\n                {/*      {edit ? (*/}\r\n                {/*        <MuiPickersUtilsProvider utils={DateFnsUtils}>*/}\r\n                {/*          <KeyboardTimePicker*/}\r\n                {/*            label=\"Out Time\"*/}\r\n                {/*            className={classes.textFieldDialog}*/}\r\n                {/*            InputProps={{*/}\r\n                {/*              classes: { input: classes.resizeDialog },*/}\r\n                {/*            }}*/}\r\n                {/*            size=\"small\"*/}\r\n                {/*            id=\"time-picker\"*/}\r\n                {/*            value={*/}\r\n                {/*              form.pickup[0] ? form.pickup[0].out_time : \"\"*/}\r\n                {/*            }*/}\r\n                {/*            onChange={(date) =>*/}\r\n                {/*              handleInOutTime(date, \"pickup\", \"out_time\")*/}\r\n                {/*            }*/}\r\n                {/*          />*/}\r\n                {/*        </MuiPickersUtilsProvider>*/}\r\n                {/*      ) : pickup && pickup[0] && pickup[0].out_time ? (*/}\r\n                {/*        \"Out time: \" +*/}\r\n                {/*        moment(pickup[0].out_time).format(\"h:mm A\")*/}\r\n                {/*      ) : (*/}\r\n                {/*        \"--\"*/}\r\n                {/*      )}*/}\r\n                {/*    </Grid>*/}\r\n                {/*  </Grid>*/}\r\n                {/*</p>*/}\r\n              </Grid>\r\n              <Grid item xs={2} justifyContent='center' display={'flex'}>\r\n                {/*<ArrowForwardIosIcon*/}\r\n                {/*  style={{*/}\r\n                {/*    color: blue,*/}\r\n                {/*    marginTop: \"13%\",*/}\r\n                {/*    margin: '0 auto',*/}\r\n                {/*    height: 40,*/}\r\n                {/*    width: 40,*/}\r\n                {/*  }}*/}\r\n                {/*/>*/}\r\n              </Grid>\r\n              <Grid item xs={4} style={{ textAlign: \"center\" }}>\r\n                {/*<Typography item sx={{fontSize:18, textAlign: 'center', fontWeight:600,}}>Drop</Typography>*/}\r\n                {/*<p>*/}\r\n                {/*  {edit && state.auth.user.role !== \"driver\" ? (*/}\r\n                {/*    <InputField*/}\r\n                {/*      id=\"outlined-basic\"*/}\r\n                {/*      variant=\"outlined\"*/}\r\n                {/*      placeholder=\"Receiver Name\"*/}\r\n                {/*      value={form.drop[0] ? form.drop[0].receiverName : \"\"}*/}\r\n                {/*      onChange={(event) =>*/}\r\n                {/*        handlePickDropChange(event, \"drop\", \"receiverName\")*/}\r\n                {/*      }*/}\r\n                {/*    />*/}\r\n                {/*  ) : (*/}\r\n                {/*    <TextPlaceHolder*/}\r\n                {/*      value={drop && drop[0] ? drop[0].receiverName : \"\"}*/}\r\n                {/*    />*/}\r\n                {/*  )}*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*  {edit && state.auth.user.role !== \"driver\" ? (*/}\r\n                {/*    <InputField*/}\r\n                {/*      id=\"outlined-basic\"*/}\r\n                {/*      variant=\"outlined\"*/}\r\n                {/*      placeholder=\"Address\"*/}\r\n                {/*      value={form.drop[0] ? form.drop[0].dropAddress : \"\"}*/}\r\n                {/*      onChange={(event) =>*/}\r\n                {/*        handlePickDropChange(event, \"drop\", \"dropAddress\")*/}\r\n                {/*      }*/}\r\n                {/*    />*/}\r\n                {/*  ) : (*/}\r\n                {/*    <TextPlaceHolder*/}\r\n                {/*      value={drop && drop[0] ? drop[0].dropAddress : \"\"}*/}\r\n                {/*    />*/}\r\n                {/*  )}*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*  {edit && state.auth.user.role !== \"driver\" ? (*/}\r\n                {/*    <Grid*/}\r\n                {/*      container*/}\r\n                {/*      spacing={2}*/}\r\n                {/*      className={classes.rootLoadDetailModal}*/}\r\n                {/*    >*/}\r\n                {/*      <Grid item xs={4}>*/}\r\n                {/*        <InputField*/}\r\n                {/*          id=\"outlined-basic\"*/}\r\n                {/*          variant=\"outlined\"*/}\r\n                {/*          placeholder=\"City\"*/}\r\n                {/*          value={form.drop[0] ? form.drop[0].dropCity : \"\"}*/}\r\n                {/*          onChange={(event) =>*/}\r\n                {/*            handlePickDropChange(event, \"drop\", \"dropCity\")*/}\r\n                {/*          }*/}\r\n                {/*        />*/}\r\n                {/*      </Grid>*/}\r\n                {/*      <Grid item xs={4}>*/}\r\n                {/*        <InputField*/}\r\n                {/*          id=\"outlined-basic\"*/}\r\n                {/*          variant=\"outlined\"*/}\r\n                {/*          placeholder=\"State\"*/}\r\n                {/*          value={form.drop[0] ? form.drop[0].dropState : \"\"}*/}\r\n                {/*          onChange={(event) =>*/}\r\n                {/*            handlePickDropChange(event, \"drop\", \"dropState\")*/}\r\n                {/*          }*/}\r\n                {/*        />*/}\r\n                {/*      </Grid>*/}\r\n                {/*      <Grid item xs={4}>*/}\r\n                {/*        <InputField*/}\r\n                {/*          id=\"outlined-basic\"*/}\r\n                {/*          variant=\"outlined\"*/}\r\n                {/*          placeholder=\"Zip\"*/}\r\n                {/*          value={form.drop[0] ? form.drop[0].dropZip : \"\"}*/}\r\n                {/*          onChange={(event) =>*/}\r\n                {/*            handlePickDropChange(event, \"drop\", \"dropZip\")*/}\r\n                {/*          }*/}\r\n                {/*        />*/}\r\n                {/*      </Grid>*/}\r\n                {/*    </Grid>*/}\r\n                {/*  ) : (*/}\r\n                {/*    <>*/}\r\n                {/*      <TextPlaceHolder*/}\r\n                {/*        value={drop && drop[0] ? drop[0].dropCity : \"\"}*/}\r\n                {/*      />*/}\r\n                {/*      ,*/}\r\n                {/*      <TextPlaceHolder*/}\r\n                {/*        value={drop && drop[0] ? drop[0].dropState : \"\"}*/}\r\n                {/*      />*/}\r\n                {/*      ,*/}\r\n                {/*      <TextPlaceHolder*/}\r\n                {/*        value={drop && drop[0] ? drop[0].dropZip : \"\"}*/}\r\n                {/*      />*/}\r\n                {/*    </>*/}\r\n                {/*  )}*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*  <Typography sx={{fontWeight:600, mb:1}}>Drop Time</Typography>*/}\r\n                {/*  {edit && state.auth.user.role !== \"driver\" ? (*/}\r\n                {/*    <Grid container>*/}\r\n                {/*      <Grid item xs={6}>*/}\r\n                {/*        <MuiPickersUtilsProvider utils={DateFnsUtils}>*/}\r\n                {/*          <KeyboardTimePicker*/}\r\n                {/*            className={classes.textFieldDialog}*/}\r\n                {/*            InputProps={{*/}\r\n                {/*              classes: { input: classes.resizeDialog },*/}\r\n                {/*            }}*/}\r\n                {/*            size=\"small\"*/}\r\n                {/*            id=\"time-picker\"*/}\r\n                {/*            value={form.drop[0] ? form.drop[0].dropDate : \"\"}*/}\r\n                {/*            onChange={(date) => handleDateChange(date, \"drop\")}*/}\r\n                {/*          />*/}\r\n                {/*        </MuiPickersUtilsProvider>*/}\r\n                {/*      </Grid>*/}\r\n                {/*      <Grid item xs={6}>*/}\r\n                {/*        <LocalizationProvider dateAdapter={AdapterDateFns}>*/}\r\n                {/*          <DatePicker*/}\r\n                {/*              // label=\"Basic example\"*/}\r\n                {/*              value={form.drop[0] ? form.drop[0].dropDate : \"\"}*/}\r\n                {/*              onChange={(newValue) => {*/}\r\n                {/*                handleDateChange(newValue, \"drop\")*/}\r\n                {/*              }}*/}\r\n                {/*              renderInput={(params) => <TextField {...params} />}*/}\r\n                {/*          />*/}\r\n                {/*        </LocalizationProvider>*/}\r\n                {/*      </Grid>*/}\r\n                {/*    </Grid>*/}\r\n                {/*  ) : drop && drop[0] ? (*/}\r\n                {/*    moment(drop[0].dropDate).format(\"LLL\")*/}\r\n                {/*  ) : (*/}\r\n                {/*    \"\"*/}\r\n                {/*  )}*/}\r\n                {/*</p>*/}\r\n                {/*<p>*/}\r\n                {/*  <Grid container>*/}\r\n                {/*    <Grid item xs={6}>*/}\r\n                {/*      {edit ? (*/}\r\n                {/*        <MuiPickersUtilsProvider utils={DateFnsUtils}>*/}\r\n                {/*          <KeyboardTimePicker*/}\r\n                {/*            label=\"In Time\"*/}\r\n                {/*            className={classes.textFieldDialog}*/}\r\n                {/*            InputProps={{*/}\r\n                {/*              classes: { input: classes.resizeDialog },*/}\r\n                {/*            }}*/}\r\n                {/*            size=\"small\"*/}\r\n                {/*            id=\"time-picker\"*/}\r\n                {/*            value={form.drop[0] ? form.drop[0].in_time : \"\"}*/}\r\n                {/*            onChange={(date) =>*/}\r\n                {/*              handleInOutTime(date, \"drop\", \"in_time\")*/}\r\n                {/*            }*/}\r\n                {/*          />*/}\r\n                {/*        </MuiPickersUtilsProvider>*/}\r\n                {/*      ) : drop && drop[0] && drop[0].in_time ? (*/}\r\n                {/*        \"In time: \" + moment(drop[0].in_time).format(\"h:mm A\")*/}\r\n                {/*      ) : (*/}\r\n                {/*        \"--\"*/}\r\n                {/*      )}*/}\r\n                {/*    </Grid>*/}\r\n                {/*    <Grid item xs={6}>*/}\r\n                {/*      {edit ? (*/}\r\n                {/*        <MuiPickersUtilsProvider utils={DateFnsUtils}>*/}\r\n                {/*          <KeyboardTimePicker*/}\r\n                {/*            label=\"Out Time\"*/}\r\n                {/*            className={classes.textFieldDialog}*/}\r\n                {/*            InputProps={{*/}\r\n                {/*              classes: { input: classes.resizeDialog },*/}\r\n                {/*            }}*/}\r\n                {/*            size=\"small\"*/}\r\n                {/*            id=\"time-picker\"*/}\r\n                {/*            value={form.drop[0] ? form.drop[0].out_time : \"\"}*/}\r\n                {/*            onChange={(date) =>*/}\r\n                {/*              handleInOutTime(date, \"drop\", \"out_time\")*/}\r\n                {/*            }*/}\r\n                {/*          />*/}\r\n                {/*        </MuiPickersUtilsProvider>*/}\r\n                {/*      ) : drop && drop[0] && drop[0].out_time ? (*/}\r\n                {/*        \"Out time: \" + moment(drop[0].out_time).format(\"h:mm A\")*/}\r\n                {/*      ) : (*/}\r\n                {/*        \"--\"*/}\r\n                {/*      )}*/}\r\n                {/*    </Grid>*/}\r\n                {/*  </Grid>*/}\r\n                {/*</p>*/}\r\n              </Grid>\r\n              <Grid item xs={1}></Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(LoadDetailModal, () => true);\r\n"],"sourceRoot":""}
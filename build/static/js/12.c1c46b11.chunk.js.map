{"version":3,"sources":["components/users/UsersList.js"],"names":["UsersList","_useSelector","useSelector","state","users","list","loading","page","limit","total","user","auth","dispatch","useDispatch","_useState","useState","open","config","_useState2","_slicedToArray","dialog","setDialog","onDialogClose","_objectSpread","afterDelete","_ref","success","data","onDelete","_id","e","stopPropagation","title","_jsxs","_Grid","container","alignItems","sx","p","gap","children","_jsx","ErrorOutlineIcon","color","_Typography","fontSize","fontWeight","okText","onOk","deleteUser","content","_DialogContentText","useEffect","fetchUsers","allowedRolesForDispatch","ROLES","admin","superadmin","emptyMessage","count","onPageChange","event","newPage","rowCellPadding","columns","id","label","emptyState","renderer","_ref2","_ref2$row$name","row","name","_ref3","_ref3$row","_ref3$row2","email","role","userRole","Fragment","includes","_Button","variant","mr","onClick","selectUserToEdit","bind","EnhancedTable","_Box","display","justifyContent","UserForm","Dialog","className","onClose"],"mappings":"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","file":"static/js/12.c1c46b11.chunk.js","sourcesContent":["import React, {Fragment, useEffect, useState} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUsers, selectUserToEdit, deleteUser } from \"../../actions/users\";\r\nimport EnhancedTable from \"../Atoms/table/Table\";\r\nimport {Box, Button, DialogContentText, Grid, Typography} from \"@mui/material\";\r\nimport Dialog from \"../Atoms/Dialog\";\r\nimport ErrorOutlineIcon from \"@mui/icons-material/ErrorOutline\";\r\nimport UserForm from \"./UserForm\";\r\nimport {ROLES} from \"../constants\";\r\n\r\nconst UsersList = () => {\r\n    const { list, loading, page, limit, total } = useSelector(\r\n        (state) => state.users\r\n    );\r\n    const { user } = useSelector((state) => state.auth);\r\n    const dispatch = useDispatch();\r\n    const [dialog, setDialog] = useState({open: false, config: {}});\r\n\r\n    const onDialogClose = () => setDialog({...dialog, open: false});\r\n\r\n    const afterDelete = ({success, data}) => {\r\n        if(success) {\r\n            onDialogClose();\r\n        }\r\n    }\r\n\r\n    const onDelete = (_id, e) => {\r\n        e.stopPropagation();\r\n\r\n        const config = {\r\n            title: () => <Grid container alignItems='center' sx={{ p: '16px 24px' }} gap={1}>\r\n                <ErrorOutlineIcon color='error' />\r\n                <Typography sx={{ fontSize: '1.25rem', fontWeight: 550 }} color='error'>Delete</Typography>\r\n            </Grid>,\r\n            okText: 'Delete',\r\n            onOk: () => dispatch(deleteUser(_id, afterDelete)),\r\n            content: () => <DialogContentText sx={{color: '#000'}}>Are you sure you want to delete the user?</DialogContentText>\r\n        }\r\n        setDialog({open: true, config});\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchUsers(+page, +limit));\r\n    }, []);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        dispatch(fetchUsers(newPage - 1, +limit));\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        const new_limit = event.target.value;\r\n        dispatch(fetchUsers(0, new_limit));\r\n    };\r\n\r\n    const allowedRolesForDispatch = [\r\n        ROLES.dispatch,\r\n        ROLES.admin,\r\n        ROLES.superadmin,\r\n    ];\r\n\r\n    const config = {\r\n        emptyMessage: 'No Users',\r\n        page,\r\n        count: total,\r\n        limit,\r\n        onPageChange: handleChangePage,\r\n        rowCellPadding: 'normal',\r\n        columns: [\r\n            {\r\n                id: 'name',\r\n                label: 'Name',\r\n                emptyState: '--',\r\n                renderer: ({ row: { name = '' } }) => name\r\n            },\r\n            {\r\n                id: 'email',\r\n                label: 'Email'\r\n            },\r\n            {\r\n                id: 'role',\r\n                label: 'Role'\r\n            },\r\n            {\r\n                id: 'actions',\r\n                label: 'Actions',\r\n                renderer: ({ row: { _id, email, role } = {}, role: userRole }) => {\r\n                    return <Fragment>\r\n                        {allowedRolesForDispatch.includes(userRole) && (\r\n                                <Button variant='contained' sx={{mr: 1}} onClick={() => {\r\n                                    dispatch(selectUserToEdit({ _id, email, role }))\r\n                                }}>\r\n                                    Update\r\n                                </Button>\r\n                            )\r\n                        }\r\n                        {user &&\r\n                            [ROLES.admin, ROLES.superadmin].includes(user.role) &&\r\n                            <Button variant='contained' color='error' onClick={onDelete.bind(this, _id)}>\r\n                                Delete\r\n                            </Button>}\r\n                    </Fragment>\r\n                }\r\n            },\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <EnhancedTable loading={loading} data={list} config={config} />\r\n            <Box sx={{display :'flex', justifyContent: 'flex-end'}}>\r\n                <UserForm />\r\n            </Box>\r\n            <Dialog className='enhancedTable_dialog' open={dialog.open} config={dialog.config} onClose={onDialogClose} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default UsersList;\r\n"],"sourceRoot":""}
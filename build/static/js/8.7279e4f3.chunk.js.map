{"version":3,"sources":["components/loadbar/Loadlistbar.js"],"names":["connect","state","load","driver","getLoads","searchLoads","_ref","_ref$load","loads","loads_pagination","page","rowsPerPage","search","resetSearchField","searchText","dispatch","useDispatch","classes","useStyles","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","open","data","_useState4","setOpen","total","_useState5","currPage","_useState6","rawLoades","setRawLoads","_useSelector","useSelector","_useSelector$auth","auth","_useSelector$auth2","_useSelector$auth2$us","user","_useSelector$driver","roles","_useSelector$driver2$","drivers","_useSelector2","query","sLoads","sPage","limit","sTotal","useEffect","setTimeout","role","filterredLoads","filter","assignedTo","interval","setInterval","clearInterval","handleChangePage","event","newPage","onDelete","id","onDialogClose","deleteLoad","success","tableConfig","useMemo","onRowClick","row","rowCellPadding","count","onPageChange","hasDelete","deletePermissions","columns","label","renderer","_ref2","_ref2$row","_ref2$row2$pickup","pickup","_pickup$","_pickup$$pickupCity","pickupCity","_pickup$$pickupState","pickupState","concat","_ref3","_ref3$row","_ref3$row2$pickup","_pickup2$0$pickupDate","pickupDate","moment","format","_ref4","_ref4$row","_ref4$row2$drop","drop","_drop$","_drop$$dropCity","dropCity","_drop$$dropState","dropState","_ref5","_ref5$row","_ref5$row2$drop","_drop2$0$dropDate","dropDate","_ref6","_ref6$row","_ref6$row2$brokerage","brokerage","emptyState","_ref7","_ref9$user","find","_id","_ref9$user2$name","name","_jsxs","className","table","children","_jsx","EnhancedTable","config","_Box","sx","display","justifyContent","includes","AddLoadForm","LoadDetailModal","modalEdit","handleClose","selectLoad"],"mappings":"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","file":"static/js/8.7279e4f3.chunk.js","sourcesContent":["import React, {useEffect, useMemo, useState} from \"react\";\r\nimport moment from 'moment';\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {deleteLoad, getLoads, searchLoads, selectLoad} from \"../../actions/load\";\r\nimport {useStyles} from \"../HelperCells.js\";\r\nimport EnhancedTable from \"../Atoms/table/Table\";\r\nimport LoadDetailModal from \"../loads/LoadDetailModal\";\r\nimport AddLoadForm from \"../load-forms/AddLoad\";\r\nimport {Box} from \"@mui/material\";\r\n\r\nconst Loadlistbar = ({\r\n                         getLoads,\r\n                         searchLoads,\r\n                         load: {loads, loads_pagination, page, rowsPerPage, search},\r\n                         resetSearchField, searchText\r\n                     }) => {\r\n    const dispatch = useDispatch(),\r\n        classes = useStyles();\r\n    // const { query, loads: sLoads, page: sPage, limit, total: sTotal } = search;\r\n    const [loading, setLoading] = useState(true);\r\n    const [open, setOpen] = useState({open: false, data: {}});\r\n    const {total, currPage} = loads_pagination;\r\n    const [rawLoades, setRawLoads] = useState([]);\r\n    const {auth: {user = {}, roles = []} = {}, driver: {drivers = []} = {}} = useSelector((state) => state),\r\n        {query, loads: sLoads, page: sPage, limit, total: sTotal} = useSelector(state => state.load.search);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n        }, 1000);\r\n        resetSearchField && resetSearchField();\r\n        if (searchText) {\r\n            searchLoads(+page, +limit, search, 'loads');\r\n        } else {\r\n            getLoads(page);\r\n        }\r\n        return () => {\r\n            resetSearchField && resetSearchField();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (user && user.role === \"load planner\") {\r\n            const filterredLoads = loads.filter((driver) => {\r\n                if (!driver.assignedTo) {\r\n                    return driver;\r\n                }\r\n            });\r\n            setRawLoads(filterredLoads);\r\n        } else if (query) {\r\n            setRawLoads(sLoads)\r\n        } else {\r\n            setRawLoads(loads);\r\n        }\r\n\r\n        //Polling for Loads\r\n        const interval = setInterval(() => {\r\n            getLoads(page);\r\n        }, 3000)\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [loads, sLoads, page]);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        newPage = newPage - 1\r\n        if (query) searchLoads(newPage, limit, query);\r\n        else getLoads(newPage, rowsPerPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        const limit = event.target.value;\r\n        if (query) searchLoads(0, limit, query);\r\n        else getLoads(0, limit);\r\n    };\r\n\r\n    const onDelete = (id, onDialogClose) => {\r\n        dispatch(deleteLoad(id, (success, data) => {\r\n            if(success){\r\n                setTimeout(() => getLoads(page), 500)\r\n                onDialogClose();\r\n            }\r\n        }))\r\n    }\r\n\r\n    const tableConfig = useMemo(() => ({\r\n        onRowClick: (row) => setOpen({open: true, data: row}),\r\n        rowCellPadding: 'normal',\r\n        count: query ? sTotal : total,\r\n        page: page,\r\n        limit: query ? sPage : rowsPerPage,\r\n        onPageChange: handleChangePage,\r\n        hasDelete: true,\r\n        onDelete,\r\n        deletePermissions: ['admin', 'ownerOperator', 'superAdmin'],\r\n        columns: [\r\n            {\r\n                id: 'loadNumber',\r\n                label: 'Load Number'\r\n            },\r\n            {\r\n                id: 'pickup',\r\n                label: 'PickUp City/State',\r\n                renderer: ({row: {pickup = []} = {}}) => {\r\n                    const [{pickupCity = '', pickupState = ''}] = pickup;\r\n                    return `${pickupCity}, ${pickupState}`;\r\n                }\r\n            },\r\n            {\r\n                id: 'pickupDate',\r\n                label: 'Pickup Date',\r\n                renderer: ({row: {pickup = []} = {}}) => {\r\n                    const [{pickupDate = ''}] = pickup;\r\n                    return moment(pickupDate).format('MM/DD')\r\n                }\r\n            },\r\n            {\r\n                id: 'dropCity',\r\n                label: 'Drop City/State',\r\n                renderer: ({row: {drop = []} = {}}) => {\r\n                    const [{dropCity = '', dropState = ''}] = drop;\r\n                    return `${dropCity}, ${dropState}`;\r\n                }\r\n            },\r\n            {\r\n                id: 'dropDate',\r\n                label: 'Drop Date',\r\n                renderer: ({row: {drop = []} = {}}) => {\r\n                    const [{dropDate = ''}] = drop;\r\n                    return moment(dropDate).format('MM/DD')\r\n                }\r\n            },\r\n\r\n            {\r\n                id: 'brokerage',\r\n                label: 'Customer',\r\n                renderer: ({row: {brokerage = ''} = {}}) => {\r\n                    return brokerage;\r\n                }\r\n            },\r\n            {\r\n                id: 'rate',\r\n                label: 'Rate',\r\n                emptyState: '--'\r\n            },\r\n            {\r\n                id: 'assignedTo',\r\n                label: 'Assigned To',\r\n                renderer: ({row}) => {\r\n                    const {user} = row || {},\r\n                        {user: {name = ''} = {}} = drivers.find(driver => driver.user && driver.user._id === user) || {};\r\n                    return name;\r\n                }\r\n            },\r\n        ]\r\n    }), [rawLoades])\r\n\r\n    return (\r\n        <div className={classes.table}>\r\n            <EnhancedTable config={tableConfig} data={rawLoades} loading={loading}/>\r\n            {user?.role && <Box sx={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                {['admin', 'superAdmin', 'dispatch'].includes(user.role) && <AddLoadForm/>}\r\n            </Box>}\r\n            {open.open && <LoadDetailModal\r\n                modalEdit={false}\r\n                open={open.open}\r\n                load={open.data}\r\n                handleClose={() => {\r\n                    setOpen({open: false, data: {}});\r\n                    dispatch(selectLoad());\r\n                }}\r\n                deleteLoad={(_id) => dispatch(deleteLoad(_id))}\r\n            />}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    load: state.load,\r\n    driver: state.driver,\r\n});\r\n\r\nexport default connect(mapStateToProps, {getLoads, searchLoads})(Loadlistbar);\r\n"],"sourceRoot":""}
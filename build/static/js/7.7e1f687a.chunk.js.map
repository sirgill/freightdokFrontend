{"version":3,"sources":["components/invoices/InvoiceService.js","components/invoices/NewInvoice.js","components/invoices/InvoicesList.js"],"names":["LOOKUP_DATA","label","cost","InvoiceService","_ref","serviceName","amount","price","quantity","description","index","deleteService","onChangeService","handleChange","e","name","target","value","_jsx","Fragment","children","_jsxs","className","InputField","onChange","placeholder","parseInt","onBlur","type","concat","parseFloat","toFixed","_IconButton","onClick","bind","DeleteOutlineIcon","color","LookUp","_ref3","handleClose","anchorEl","onAddNewService","_useState","useState","_useState2","_slicedToArray","list","setList","handleClick","selected","_Popover","id","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","_Stack","sx","p","width","autoFocus","val","toLowerCase","filtered","filter","item","includes","_List","map","data","_ListItemButton","_ListItem","disablePadding","secondaryAction","_ListItemText","primary","_Button","startIcon","AddCircleOutlineIcon","InvoiceServiceWrapper","_ref4","services","_React$useState","React","_React$useState2","setAnchorEl","servicesComp","useMemo","s","_objectSpread","event","currentTarget","Title","_ref$sx","_ref$variant","variant","_Typography","fontWeight","DialogComponent","_ref2","transition","getTotal","pdf","setPdf","addService","ref","useRef","_ref3$brokerage","brokerage","_ref3$loadNumber","loadNumber","_ref3$pickup","pickup","_ref3$drop","drop","_ref3$accessorials","rate","accessorials","_ref3$proofDelivery","proofDelivery","_ref3$rateConfirmatio","rateConfirmation","bucketFiles","_pickup$","receiverName","pickupAddress","pickupCity","pickupState","pickupZip","console","log","docFileViewer","doc","src","fileLocation","alt","fileName","reactToPrintContent","useCallback","current","reactToPrintTrigger","_Dialog","class","PaperProps","TransitionComponent","maxWidth","_DialogContent","_Grid","container","direction","display","media","xs","justifyContent","flexGrow","spacing","textAlign","_Divider","borderBottomWidth","borderColor","blue","height","alignItems","gap","htmlFor","background","borderRadius","accept","style","getCheckStatusIcon","length","ReactToPrint","content","documentTitle","removeAfterPrint","trigger","Invoice","_ref6","_ref6$match","match","_ref6$match2$params","params","_ref6$match2$params2$","history","setOpen","_useState3","_useState4","invoices","useSelector","state","load","_useState5","_useState6","setServices","find","invoice","_id","useEffect","Transition","forwardRef","props","useHistory","_Zoom","onExited","goBack","reduce","acc","service","obj","_toConsumableArray","_ref7","row","clone","splice","useStyles","makeStyles","TableContainer","borderBottom","loadSearchbar","paddingBottom","InvoicesList","setSelectedLoad","resetSearchField","listBarType","classes","load_selected","dispatch","useDispatch","path","useRouteMatch","setLoading","_useSelector","page","limit","role","total","auth","user","show","loads","_useSelector3","openBoard","chRobinsonLoads","shallowEqual","totalCount","setTimeout","resetLoadsSearch","getInvoiceLoads","config","rowCellPadding","headerCellSx","pt","pb","emptyMessage","count","columns","renderer","date","moment","pickUpByDate","isValid","format","dropCity","dropState","_ref5","deliverBy","getParsedLoadEquipment","_ref7$modesString","modesString","_ref7$standard","standard","_ref8","_ref9$weight","weight","_ref9$weight2$pounds","pounds","_ref10","emptyState","visible","_ref11","Button","component","Link","to","table","EnhancedTable","Route"],"mappings":"qfAOMA,EAAc,CAChB,CAAEC,MAAO,YAAaC,KAAM,MAC5B,CAAED,MAAO,QAASC,KAAM,QACxB,CAAED,MAAO,SAAUC,KAAM,QAGvBC,EAAiB,SAAHC,GAAsG,IAAhGC,EAAWD,EAAXC,YAAaC,EAAMF,EAANE,OAAQC,EAAKH,EAALG,MAAOC,EAAQJ,EAARI,SAAUC,EAAWL,EAAXK,YAAaC,EAAKN,EAALM,MAAOC,EAAaP,EAAbO,cAAeC,EAAeR,EAAfQ,gBACzFC,EAAe,SAACC,GAClB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACnBL,GACAA,EAAgBF,EAAO,CAAEK,OAAME,SAEvC,EAyBA,OACIC,cAACC,WAAQ,CAAAC,SACLC,eAAA,MAAIC,UAAU,oBAAmBF,SAAA,CAC7BF,cAAA,MAAAE,SAAKf,IACLa,cAAA,MAAAE,SAAIF,cAACK,IAAU,CAACR,KAAM,cAAeE,MAAOR,EAAae,SAAUX,EAAcS,UAAU,oBACvFG,YAAa,6BACjBP,cAAA,MAAAE,SAAIF,cAACK,IAAU,CAACR,KAAM,WAAYS,SA7BvB,SAACV,GACpB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQS,SAASZ,EAAEE,OAAOC,OAChCL,EAAgBF,EAAO,CAAEK,OAAME,SACnC,EAyBwEU,OAvBzD,SAACb,GACZ,IAAMG,EAAQS,SAASZ,EAAEE,OAAOC,OAC1BF,EAAOD,EAAEE,OAAOD,KAClBE,EAAQ,EACJL,IACAA,EAAgBF,EAAO,CAAEK,OAAME,MAAO,IACtCL,EAAgBF,EAAO,CAAEK,KAAM,QAASE,MAAOS,SAASpB,MAIxDM,IACAA,EAAgBF,EAAO,CAAEK,OAAME,UAC/BL,EAAgBF,EAAO,CAAEK,KAAM,QAASE,MAAOS,SAASpB,GAAUW,IAG9E,EAQwFK,UAAU,oBAAoBM,KAAK,SAASX,MAAOT,MAC/HU,cAAA,MAAAE,SAAIF,cAACK,IAAU,CAACR,KAAM,QAASS,SAAUX,EAAcI,MAAOV,EAAOe,UAAU,wBAC/EJ,cAAA,MAAAE,SAAKb,EAAK,IAAAsB,OAAOC,WAAWvB,GAAOwB,QAAQ,IAAO,UAClDb,cAAA,MAAAE,SAAIF,cAAAc,IAAA,CAAYC,QAAStB,EAAcuB,KAAK,KAAMxB,GAAOU,SACrDF,cAACiB,IAAiB,CAACC,MAAO,kBAK9C,EAeMC,EAAS,SAAHC,GAAoD,IAA9CC,EAAWD,EAAXC,YAAaC,EAAQF,EAARE,SAAUC,EAAeH,EAAfG,gBACrCC,EAAwBC,mBAAS3C,GAAY4C,EAAAC,YAAAH,EAAA,GAAtCI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GASdI,EAAc,SAACC,GACbR,GACAA,EAAgBQ,GAEpBV,GACJ,EAEA,OAAOrB,cAAAgC,IAAA,CACHC,GAAI,QACJX,SAAUA,EACVY,KAAMC,QAAQb,GACdc,QAASf,EACTgB,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,gBAAiB,CACbF,SAAU,SACVC,WAAY,QACdrC,SAEFC,eAAAsC,IAAA,CAAOC,GAAI,CAAEC,EAAG,EAAGC,MAAO,KAAM1C,SAAA,CAC5BF,cAAAyC,IAAA,CAAAvC,SACIF,cAACK,IAAU,CAACR,KAAM,SAAUgD,WAAS,EAACtC,YAAY,oBAAoBD,SA/BjE,SAACV,GACd,IAAMkD,EAAMlD,EAAEE,OAAOC,MAAMgD,cAC3B,GAAID,EAAK,CACL,IAAME,EAAWpB,EAAKqB,QAAO,SAAAC,GAAI,OAAIA,EAAKnE,MAAMgE,cAAcI,SAASL,EAAI,IAC3EjB,EAAQmB,EACZ,MAAOnB,EAAQ/C,EACnB,MA2BQkB,cAAAyC,IAAA,CAAAvC,SACIF,cAAAoD,IAAA,CAAAlD,SACK0B,EAAKyB,KAAI,SAAAC,GACN,OAAOtD,cAAAuD,IAAA,CAAiCxC,QAASe,EAAYd,KAAK,KAAMsC,GAAMpD,SAC1EF,cAAAwD,IAAA,CAAUC,gBAAc,EAACC,gBAAiB1D,cAAA,QACtCI,UAAW,uBAAuBF,SAAE,IAAMoD,EAAKtE,OAAakB,SAC5DF,cAAA2D,IAAA,CAAcC,QAASN,EAAKvE,WAHRuE,EAAKvE,MAMrC,QAGRiB,cAAAyC,IAAA,CAAAvC,SACIF,cAAA6D,IAAA,CAAQC,UAAW9D,cAAC+D,IAAoB,IAAI7D,SAAC,4BAM7D,EA6Ce8D,EA3Ce,SAAHC,GAAuE,IAAjEC,EAAQD,EAARC,SAAU3C,EAAe0C,EAAf1C,gBAAiB7B,EAAeuE,EAAfvE,gBAAiBD,EAAawE,EAAbxE,cAEzE0E,EAAgCC,IAAM3C,SAAS,MAAK4C,EAAA1C,YAAAwC,EAAA,GAA7C7C,EAAQ+C,EAAA,GAAEC,EAAWD,EAAA,GACtBE,EAAeC,mBAAQ,WACzB,OAAON,EAASb,KAAI,SAACoB,EAAGjF,GACpB,OAAOQ,cAACf,EAAcyF,wBAAA,GAAKD,GAAC,IAAEjF,MAAOA,EAAOE,gBAAiBA,EACzDD,cAAeA,IACvB,GACJ,GAAG,CAACyE,IAUJ,OACI/D,eAACiE,IAAMnE,SAAQ,CAAAC,SAAA,CACXC,eAAA,SAAOC,UAAU,sBAAqBF,SAAA,CAClCC,eAAA,MAAIC,UAAU,cAAaF,SAAA,CACvBF,cAAA,MAAAE,SAAI,aACJF,cAAA,SACAA,cAAA,MAAAE,SAAI,aACJF,cAAA,MAAAE,SAAI,UACJF,cAAA,MAAAE,SAAI,WACJF,cAAA,YAEHuE,EACDvE,cAAA,MAAII,UAAU,gBAAeF,SACzBF,cAAA,MAAII,UAAU,aAAaW,QArBvB,SAAC4D,GACjBL,EAAYK,EAAMC,cACtB,EAmBgE1E,SAC5CF,cAAA6D,IAAA,CAAQnB,GAAI,CAAEE,MAAO,KAAOkB,UAAW9D,cAAC+D,IAAoB,IAAK,mBAAkB,QAAQ7D,SAAC,wBAMxGF,cAACmB,EAAM,CAACE,YAxBI,WAChBiD,EAAY,KAChB,EAsB0ChD,SAAUA,EAAUC,gBAAiBA,MAGnF,E,QCvJMsD,EAAQ,SAAH3F,GAAwD,IAAlDW,EAAIX,EAAJW,KAAIiF,EAAA5F,EAAEwD,UAAE,IAAAoC,EAAG,CAAC,EAACA,EAAAC,EAAA7F,EAAE8F,eAAO,IAAAD,EAAG,QAAOA,EAAE7E,EAAQhB,EAARgB,SAC/C,OACIF,cAAAiF,IAAA,CAAYvC,GAAEgC,YAAA,CAAIQ,WAAY,KAAQxC,GAAMsC,QAASA,EAAQ9E,SACxDA,GAAYL,GAGzB,EAwBMsF,EAAkB,SAAHC,GAYd,IAXHC,EAAUD,EAAVC,WACAhE,EAAW+D,EAAX/D,YACAa,EAAIkD,EAAJlD,KACAoB,EAAI8B,EAAJ9B,KAGAgC,GAFGF,EAAHG,IACMH,EAANI,OACQJ,EAARE,UACApB,EAAQkB,EAARlB,SACAuB,EAAUL,EAAVK,WACA/F,EAAe0F,EAAf1F,gBACAD,EAAa2F,EAAb3F,cAEMiG,EAAMtB,IAAMuB,OAAO,MACzBvE,EAUIkC,GAAQ,CAAC,EAACsC,EAAAxE,EATVyE,iBAAS,IAAAD,EAAG,GAAEA,EAAAE,EAAA1E,EACd2E,kBAAU,IAAAD,EAAG,GAAEA,EAAAE,EAAA5E,EACf6E,cAAM,IAAAD,EAAG,GAAEA,EAAAE,EAAA9E,EACX+E,YAAI,IAAAD,EAAG,GAAEA,EACAE,GADAhF,EACTiF,KAASjF,EACTkF,qBAAY,IAAAF,EAAG,GAAEA,EAAAG,EAAAnF,EACjBoF,qBAAa,IAAAD,EAAG,GAAEA,EAAAE,EAAArF,EAClBsF,wBAAgB,IAAAD,EAAG,GAAEA,EACrBE,EAAWvF,EAAXuF,YAAW1C,EAEekC,GAAQ,GAC8BS,GAD5BjF,YAAAsC,EAAC,GAAD,GAAjC4C,aAAiBlF,YACsCsE,EAAM,OAAhDW,EAAbE,cAAyBF,EAAVG,WAAuBH,EAAXI,YAAsBJ,EAATK,UAC/CC,QAAQC,IAAIR,GAEZ,IAAMS,EAAgBhD,IAAMI,SAAQ,WAChC,OAAOmC,GAAeA,EAAYtD,KAAI,SAAAgE,GAClC,OAAQrH,cAAA,OAAKI,UAAU,uBAAsBF,SACzCF,cAAA,OAAAE,SACIF,cAAA,OAAKI,UAAU,gBAAgBkH,IAAKD,EAAIE,aAAcC,IAAKH,EAAII,cAG3E,GACJ,GAAG,CAACd,IAIEe,EAAsBtD,IAAMuD,aAAY,WAC1C,OAAOjC,EAAIkC,OACf,GAAG,CAAClC,EAAIkC,UAGFC,EAAsBzD,IAAMuD,aAAY,WAQ1C,OACI3H,cAAA6D,IAAA,CAAQzD,UAAU,eAAe4E,QAAS,YAAY9E,SAAC,kBAI/D,GAAG,IAEH,OACIF,cAAA8H,IAAA,CACIC,MAAM,gBACNC,WAAY,CACRtF,GAAI,CAAEE,MAAO,QAEjBV,KAAMA,EACNE,QAASf,EACT4G,oBAAqB5C,EACrB6C,SAAU,KAAKhI,SAEfF,cAAAmI,IAAA,CAAezF,GAAI,CAAEC,EAAG,GAAIzC,SACxBC,eAAA,OAAKuF,IAAKA,EAAKtF,UAAU,YAAWF,SAAA,CAChCC,eAAAiI,IAAA,CACIC,WAAS,EACTC,UAAU,SACV5F,GAAI,CAAE6F,QAAe,eAAgCrI,SAAA,CAErDF,cAAA,SAAOU,KAAK,WAAW8H,MAAM,QAAOtI,SAAE,wDAGtCF,cAAAoI,IAAA,CAAMlF,MAAI,EAACuF,GAAI,GAAI/F,GAAI,CAAEC,EAAG,GAAIzC,SAC5BC,eAAAiI,IAAA,CAAMC,WAAS,EAACK,eAAgB,gBAAgBxI,SAAA,CAC5CF,cAAAoI,IAAA,CAAMlF,MAAI,EAACR,GAAI,CAAEiG,SAAU,GAAIzI,SAC3BF,cAAAyC,IAAA,CAAOmG,QAAS,EAAE1I,SACdF,cAAAyC,IAAA,CAAAvC,SACIF,cAAAiF,IAAA,CAAYvC,GAAI,CAAEmG,UAAW,QAAU7D,QAAQ,KAAI9E,SAC9C,wBAKjBF,cAAAoI,IAAA,CAAMlF,MAAI,EAAAhD,SACNC,eAAAsC,IAAA,CAAAvC,SAAA,CACIF,cAAAyC,IAAA,CAAAvC,SACIF,cAAAiF,IAAA,CAAYD,QAAQ,KAAKtC,GAAI,CAAEmG,UAAW,SAAU3I,SAAC,cAIzDF,cAAAyC,IAAA,CAAAvC,SACIF,cAACK,IAAU,CAACtB,MAAM,QAAQ2B,KAAK,yBAMnDV,cAAA8I,IAAA,CAASpG,GAAI,CAAEqG,kBAAmB,OAAQC,YAAaC,OACvDjJ,cAAAoI,IAAA,CAAMK,GAAI,GAAIvF,MAAI,EAAAhD,SACdC,eAAAiI,IAAA,CAAMC,WAAS,EAACK,eAAgB,gBAAgBxI,SAAA,CAC5CF,cAAAoI,IAAA,CAAMlF,MAAI,EAAAhD,SACNC,eAAAsC,IAAA,CAAOmG,QAAS,EAAGlG,GAAI,CAAEC,EAAG,GAAIzC,SAAA,CAC5BF,cAAAyC,IAAA,CAAAvC,SACIF,cAAAiF,IAAA,CAAA/E,SAAY,eAEhBF,cAAAyC,IAAA,CAAAvC,SACIF,cAAC6E,EAAK,CAACnC,GAAI,CAAEwC,WAAY,KAAMhF,SAAE2F,WAI7C7F,cAAAoI,IAAA,CAAMlF,MAAI,EAAAhD,SACNF,cAAAyC,IAAA,CAAOiG,eAAgB,gBAAiBhG,GAAI,CAAEwG,OAAQ,QAAShJ,SAC3DC,eAAAsC,IAAA,CAAO6F,UAAW,MAAOa,WAAY,SAAUP,QAAS,EAAGjG,EAAG,EAAEzC,SAAA,CAC5DF,cAAC6E,EAAK,CAAA3E,SAAC,kBACPF,cAAC6E,EAAK,CAAA3E,SAAE6F,gBAM5B/F,cAAA8I,IAAA,CAASpG,GAAI,CAAEqG,kBAAmB,OAAQC,YAAaC,OAEvD9I,eAAAiI,IAAA,CAAMlF,MAAI,EAACR,GAAI,CAAEC,EAAG,GAAK4F,QAAS,UAAWD,UAAU,SAAQpI,SAAA,CAC3DF,cAAAyC,IAAA,CAAOC,GAAI,CAAEmG,UAAW,SAAU3I,SAC9BC,eAAC0E,EAAK,CAAA3E,SAAA,CAAC,UAAQoF,KAAc,WAEjCnF,eAAAiI,IAAA,CAAMC,WAAS,EAACc,WAAY,MAAOT,eAAgB,gBAAgBxI,SAAA,CAC/DF,cAAAoI,IAAA,CAAMlF,MAAI,EAACuF,GAAI,GAAIrI,UAAU,4BAA2BF,SACpDF,cAACgE,EAAqB,CAClBtE,gBAAiBA,EAAiBwE,SAAUA,EAAU3C,gBAAiBkE,EACvEhG,cAAeA,MAGvBO,cAAAoI,IAAA,CAAMK,GAAI,EAAGvF,MAAI,IAMjBlD,cAAAoI,IAAA,CAAMK,GAAI,EAAGvF,MAAI,EAAAhD,SACbC,eAAAsC,IAAA,CAAOiG,eAAgB,SAAUU,IAAK,OAAQhJ,UAAU,kBAAiBF,SAAA,CACrEC,eAAAsC,IAAA,CAAO6F,UAAW,MAAOI,eAAgB,SAAUU,IAAK,OAAOlJ,SAAA,CAC3DC,eAAA,SAAOkJ,QAAS,UAAUnJ,SAAA,CACtBF,cAAAiF,IAAA,CAAY4D,UAAW,SAAUnG,GAAI,CACjCE,MAAO,IACP0G,WAAY,mBACZpI,MAAO,OACPqI,aAAc,OAChBrJ,SAAC,aACHF,cAAA,SAAOU,KAAM,OAAQ8I,OAAQ,MAAOvH,GAAI,UAAWwH,MAAO,CAAElB,QAAS,aAEzEvI,cAAA,OAAAE,SACKwJ,cAAqBhD,EAAiBiD,aAG/CxJ,eAAAsC,IAAA,CAAO6F,UAAW,MAAOI,eAAgB,SAAUU,IAAK,OAAOlJ,SAAA,CAC3DC,eAAA,SAAOkJ,QAAS,MAAMnJ,SAAA,CAClBF,cAAAiF,IAAA,CAAY4D,UAAW,SAAUnG,GAAI,CACjCE,MAAO,IACP0G,WAAY,mBACZpI,MAAO,OACPqI,aAAc,OAChBrJ,SAAC,sBAGHF,cAAA,SAAOU,KAAM,OAAQ8I,OAAQ,MAAOvH,GAAI,MAAOwH,MAAO,CAAElB,QAAS,aAErEvI,cAAA,OAAAE,SACKwJ,cAAqBlD,EAAcmD,aAG5CxJ,eAAAsC,IAAA,CAAO6F,UAAW,MAAOI,eAAgB,SAAUU,IAAK,OAAOlJ,SAAA,CAC3DC,eAAA,SAAOkJ,QAAS,eAAenJ,SAAA,CAC3BF,cAAAiF,IAAA,CAAY4D,UAAW,SAAUnG,GAAI,CACjCE,MAAO,IACP0G,WAAY,mBACZpI,MAAO,OACPqI,aAAc,OAChBrJ,SAAC,iBACHF,cAAA,SAAOU,KAAM,OAAQ8I,OAAQ,MAAOvH,GAAI,eAAgBwH,MAAO,CAAElB,QAAS,aAE9EvI,cAAA,OAAAE,SACKwJ,cAAqBpD,EAAaqD,kBAKnD3J,cAAAoI,IAAA,CAAMK,GAAI,EAAGvF,MAAI,EAACqF,QAAS,OAAQG,eAAgB,MAAMxI,SACrDF,cAAC4J,IAAY,CACTC,QAASnC,EACToC,cAAc,UAGdC,kBAAgB,EAChBC,QAASnC,eAO5BT,QAKrB,EAmGe6C,EAjGC,SAAHC,GAA+D,IAADC,EAAAD,EAAxDE,MAAwCC,QAAnC,IAAAF,EAAiC,CAAC,EAACA,GAA/BG,OAAwBC,QAAlB,IAAAF,EAAgB,CAAC,EAACA,GAAdpI,UAAE,IAAAsI,EAAG,GAAEA,EACzC/I,GADgE0I,EAAPM,QACjC/I,oBAAS,IAAMC,EAAAC,YAAAH,EAAA,GAAhCU,EAAIR,EAAA,GAAE+I,EAAO/I,EAAA,GACpBgJ,EAAsBjJ,oBAAS,GAAMkJ,EAAAhJ,YAAA+I,EAAA,GAA9BnF,EAAGoF,EAAA,GAAEnF,EAAMmF,EAAA,GACZC,EAAWC,aAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,SAAStH,IAAI,KAAK,GAAE0H,EACzCvJ,mBAAS,IAAGwJ,EAAAtJ,YAAAqJ,EAAC,GAAtC9G,EAAQ+G,EAAA,GAAEC,EAAWD,EAAA,GACtB3H,EAAOsH,EAASO,MAAK,SAACC,GAAO,OAAKA,EAAQC,MAAQpJ,CAAE,IAKxDqJ,qBAAU,WAHNb,GAAQ,EAKZ,GAAG,IAEH,IAyBMc,EAAa/G,mBAAQ,WACvB,OAAOJ,IAAMoH,YAAW,SAAoBC,EAAO/F,GAC/C,IAAM8E,EAAUkB,uBAChB,OACI1L,cAAA2L,IAAAjH,wBAAA,CACIgB,IAAKA,GACD+F,GAAK,IACTG,SAAU,WACN,OAAOpB,EAAQqB,QACnB,IAGZ,GACJ,GAAG,IAEGvG,EAAWqC,uBAAY,WAEzB,MAAO,IADOzD,EAAS4H,QAAO,SAACC,EAAKC,GAAO,OAAKpL,WAAWoL,EAAQ3M,OAAS0M,CAAG,GAAE,GAC9DlL,QAAQ,EAC/B,GAAG,CAACqD,IAqBJ,OACIlE,cAAA,OAAAE,SACIF,cAACmF,EAAe,CACZjD,KAAMA,EACNb,YApEQ,SAACzB,GAEjB6K,GAAQ,EACZ,EAkEYpF,WAAYkG,EACZjI,KAAMA,EACNiC,IAAKA,EACLC,OAAQA,EACRtB,SAAUA,EACVuB,WArEO,SAACuG,GAChB,IAAQjN,EAAgBiN,EAAhBjN,MAAOC,EAASgN,EAAThN,KACXiN,EAAM,CACN9M,YAAaJ,EACbQ,YAAa,GACbD,SAAU,EACVD,MAAOL,EACPI,OAAQJ,GAEZkM,EAAY,GAADvK,OAAAuL,YAAKhI,GAAQ,CAAE+H,IAC9B,EA4DYvM,gBA1DY,SAACF,EAAK2M,GAAuB,IAAnBtM,EAAIsM,EAAJtM,KAAME,EAAKoM,EAALpM,MAC9BqM,EAAMlI,EAAS1E,GACrB4M,EAAIvM,GAAQE,EACZ,IAAMsM,EAAKH,YAAOhI,GAClBmI,EAAM7M,GAAS4M,EACflB,EAAYmB,EAChB,EAqDY/G,SAAUA,EACV7F,cAhCU,SAACD,GACnB,IAAM8D,EAAOY,EACbZ,EAAKgJ,OAAO9M,EAAO,GACnB0L,EAAWgB,YAAK5I,GACpB,KAgCJ,E,2BChWMiJ,EAAYC,YAAW,CACzBC,eAAgB,CACZC,aAAc,QAElBC,cAAe,CACX9D,UAAW,QACX+D,cAAe,MAIR,SAASC,EAAY3N,GAAkBA,EAAf4N,gBAAkE,IAAjDC,EAAgB7N,EAAhB6N,iBAAkBC,EAAW9N,EAAX8N,YAChEC,GAD0F/N,EAAbgO,cACnEX,KACVY,EAAWC,cACVC,EAAQC,0BAARD,KACP7L,EAA8BC,oBAAS,GAAKC,EAAAC,YAAAH,EAAA,GAA5B+L,GAAF7L,EAAA,GAAYA,EAAA,IAC1B8L,EAA+B3C,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,QAAQ,IAA/D6C,EAAID,EAAJC,KAAMC,EAAKF,EAALE,MACNC,GADkBH,EAALI,MACJ/C,aAAY,SAAAC,GAAK,OAAIA,EAAM+C,KAAKC,IAAI,IAA7CH,MACRzG,QAAQC,IAAIwG,GACZ,IAAM/C,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SAAStH,IAAI,IAC9DoH,EAAgCjJ,oBAAS,GAAMkJ,EAAAhJ,YAAA+I,EAAA,GAC/CM,GADgBL,EAAA,GAAYA,EAAA,GACJlJ,mBAAS,CAAEsM,MAAM,EAAOzK,KAAM,CAAC,KAAI2H,EAAAtJ,YAAAqJ,EAAA,GACrDgD,GADK/C,EAAA,GAASA,EAAA,GACNJ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKiD,KAAK,KACnDC,EAA4CpD,aAAY,SAAAC,GAAK,OAAIA,EAAMoD,UAAUC,eAAe,GAAEC,KAArEC,GAAkFJ,EAAvGD,MAA+BC,EAAVI,YAE7B/C,qBAAU,WAQN,OAPAgD,YAAW,WACPf,GAAW,EACf,GAAG,KACHR,GAAoBA,IACpBI,EAASoB,YAAiBvB,IAC1BG,EAASqB,eAEF,WACHzB,GAAoBA,IACpBI,EAASoB,YAAiBvB,GAC9B,CACJ,GAAG,IAEH1B,qBAAU,WACN6B,EAASqB,cACb,GAAG,CAACR,IAEJ,IAQMS,EAAS,CACXC,eAAgB,UAChBC,aAAc,CAAEC,GAAI,EAAGC,GAAI,GAC3BC,aAAc,oBACdrB,OACAsB,MAAOV,EACPX,QACAsB,QAAS,CACL,CACI/M,GAAI,aACJlD,MAAO,eAEX,CACIkD,GAAI,UACJlD,MAAO,oBACPkQ,SAAU,SAAA7J,GAAc,IAAXgH,EAAGhH,EAAHgH,IACT,OACIjM,eAACF,WAAQ,CAAAC,SAAA,CACJkM,EAAInG,OAAO,GAAGc,WAAW,KAAGqF,EAAInG,OAAO,GAAGe,cAGvD,GAEJ,CACI/E,GAAI,aACJlD,MAAO,cACPkQ,SAAU,SAAA7N,GAAc,IAAXgL,EAAGhL,EAAHgL,IACL8C,EAAO,GAIX,OAHIC,IAAO/C,EAAIgD,cAAcC,YACzBH,EAAOC,IAAO/C,EAAIgD,cAAcE,OAAO,cAEpCtP,cAACC,WAAQ,CAAAC,SAAEgP,GACtB,GAEJ,CACIjN,GAAI,kBACJlD,MAAO,sBACPkQ,SAAU,SAAAhL,GAAc,IAAXmI,EAAGnI,EAAHmI,IACT,OACIjM,eAACF,WAAQ,CAAAC,SAAA,CACJkM,EAAIjG,KAAK,GAAGoJ,SAAS,KAAGnD,EAAIjG,KAAK,GAAGqJ,YAGjD,GAEJ,CACIvN,GAAI,eACJlD,MAAO,gBACPkQ,SAAU,SAAAQ,GAAc,IAAXrD,EAAGqD,EAAHrD,IACL8C,EAAO,GAIX,OAHIC,IAAO/C,EAAIsD,WAAWL,YACtBH,EAAOC,IAAO/C,EAAIsD,WAAWJ,OAAO,cAEjCtP,cAACC,WAAQ,CAAAC,SAAEgP,GACtB,GAEJ,CACIjN,GAAI,YACJlD,MAAO,YACPkQ,SAAU,SAAA/E,GAAc,IAAXkC,EAAGlC,EAAHkC,IACTD,EAA4CwD,YAAuBvD,IAAQ,CAAC,EAACwD,EAAAzD,EAArE0D,mBAAW,IAAAD,EAAG,GAAEA,EAAAE,EAAA3D,EAAE4D,gBAAQ,IAAAD,EAAG,GAAEA,EACvC,OACI3P,eAACF,WAAQ,CAAAC,SAAA,CACJ2P,EAAY,IAAEE,IAG3B,GAEJ,CACI9N,GAAI,SACJlD,MAAO,SACPkQ,SAAU,SAAAe,GAAc,IAC4BC,GADpCD,EAAH5D,KACqC,CAAC,GAAzC8D,OAA4BC,QAAtB,IAAAF,EAAoB,CAAC,EAACA,GAAlBG,cAAM,IAAAD,EAAG,GAAEA,EAE3B,OADIC,IAAQA,GAAkB,QACvBpQ,cAACC,WAAQ,CAAAC,SAAEkQ,GACtB,GAEJ,CACInO,GAAI,UACJlD,MAAO,UACPkQ,SAAU,SAAAoB,GAAc,IAAXjE,EAAGiE,EAAHjE,IACT,OAAU,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKvG,SAChB,EACAyK,WAAY,MAEhB,CACIrO,GAAI,OACJlD,MAAO,OACPuR,WAAY,MAEhB,CACIrO,GAAI,GACJlD,MAAO,UACPwR,QAAS,CAAC,SAAU,QAAS,aAAc,iBAAiBpN,SAASwK,GACrEsB,SAAU,SAAAuB,GAAc,IAAXpE,EAAGoE,EAAHpE,IACT,OAAOpM,cAACyQ,IAAM,CACVC,UAAWC,IACXC,GAAIvD,EAAO,IAAMjB,EAAIf,IACrBrG,QAAQ,WACR9D,MAAM,UAAShB,SAClB,kBAGL,KAKZ,OACIF,cAAA,OAAKI,UAAW6M,EAAQ4D,MAAM3Q,SAE1BC,eAACF,WAAQ,CAAAC,SAAA,CACLF,cAAC8Q,IAAa,CAACrC,OAAQA,EAAQnL,KAAMsH,IACrC5K,cAAC+Q,QAAK,CAAC1D,KAAMA,EAAO,OAAQqD,UAAWzG,QA4BvD,C","file":"static/js/7.7e1f687a.chunk.js","sourcesContent":["import React, { useMemo, Fragment, useState } from \"react\";\r\nimport './styles.css'\r\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\r\nimport { Button, IconButton, List, Popover, Stack, ListItem, ListItemText, ListItemButton } from \"@mui/material\";\r\nimport InputField from \"../Atoms/form/InputField\";\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\n\r\nconst LOOKUP_DATA = [\r\n    { label: \"Detention\", cost: '67' },\r\n    { label: \"Loads\", cost: '1000' },\r\n    { label: \"Lumper\", cost: '786' },\r\n]\r\n\r\nconst InvoiceService = ({ serviceName, amount, price, quantity, description, index, deleteService, onChangeService }) => {\r\n    const handleChange = (e) => {\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        if (onChangeService) {\r\n            onChangeService(index, { name, value })\r\n        }\r\n    }\r\n\r\n    const handleQuantity = (e) => {\r\n        const name = e.target.name\r\n        const value = parseInt(e.target.value)\r\n        onChangeService(index, { name, value })\r\n    }\r\n\r\n    const onBlur = (e) => {\r\n        const value = parseInt(e.target.value)\r\n        const name = e.target.name\r\n        if (value < 1) {\r\n            if (onChangeService) {\r\n                onChangeService(index, { name, value: 1 })\r\n                onChangeService(index, { name: 'price', value: parseInt(amount) });\r\n\r\n            }\r\n        } else {\r\n            if (onChangeService) {\r\n                onChangeService(index, { name, value });\r\n                onChangeService(index, { name: 'price', value: parseInt(amount) * value });\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <tr className='invoiceServiceRow'>\r\n                <td>{serviceName}</td>\r\n                <td><InputField name={'description'} value={description} onChange={handleChange} className='serviceInputField'\r\n                    placeholder={'Enter item description'} /></td>\r\n                <td><InputField name={'quantity'} onChange={handleQuantity} onBlur={onBlur} className='serviceInputField' type='number' value={quantity} /></td>\r\n                <td><InputField name={'price'} onChange={handleChange} value={price} className='serviceInputField' /></td>\r\n                <td>{price ? `$${parseFloat(price).toFixed(2)}` : '$0.00'}</td>\r\n                <td><IconButton onClick={deleteService.bind(null, index)}>\r\n                    <DeleteOutlineIcon color={'error'} />\r\n                </IconButton></td>\r\n            </tr>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nconst InvoiceDataTableRows = ({ price = 99 }) => {\r\n    return (<Fragment>\r\n        <tr className='InvoiceDataTableRows'>\r\n            <td>9</td>\r\n            <td>a</td>\r\n            <td>b</td>\r\n            <td>c</td>\r\n            <td>{price ? `$${parseFloat(price).toFixed(2)}` : '$0.00'}</td>\r\n        </tr>\r\n    </Fragment>)\r\n}\r\n\r\nconst LookUp = ({ handleClose, anchorEl, onAddNewService }) => {\r\n    const [list, setList] = useState(LOOKUP_DATA)\r\n    const onChange = (e) => {\r\n        const val = e.target.value.toLowerCase();\r\n        if (val) {\r\n            const filtered = list.filter(item => item.label.toLowerCase().includes(val));\r\n            setList(filtered)\r\n        } else setList(LOOKUP_DATA)\r\n    }\r\n\r\n    const handleClick = (selected) => {\r\n        if (onAddNewService) {\r\n            onAddNewService(selected)\r\n        }\r\n        handleClose()\r\n    }\r\n\r\n    return <Popover\r\n        id={'jugal'}\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'center',\r\n            horizontal: 'left',\r\n        }}\r\n    >\r\n        <Stack sx={{ p: 2, width: 500 }}>\r\n            <Stack>\r\n                <InputField name={'search'} autoFocus placeholder='Type on item name' onChange={onChange} />\r\n            </Stack>\r\n            <Stack>\r\n                <List>\r\n                    {list.map(data => {\r\n                        return <ListItemButton key={data.label} onClick={handleClick.bind(null, data)}>\r\n                            <ListItem disablePadding secondaryAction={<span\r\n                                className={'listButtonPickerCost'}>{\"$\" + data.cost}</span>}>\r\n                                <ListItemText primary={data.label} />\r\n                            </ListItem>\r\n                        </ListItemButton>\r\n                    })}\r\n                </List>\r\n            </Stack>\r\n            <Stack>\r\n                <Button startIcon={<AddCircleOutlineIcon />}>\r\n                    Create a new Item\r\n                </Button>\r\n            </Stack>\r\n        </Stack>\r\n    </Popover>\r\n}\r\n\r\nconst InvoiceServiceWrapper = ({ services, onAddNewService, onChangeService, deleteService }) => {\r\n    // console.log('services', services)\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const servicesComp = useMemo(() => {\r\n        return services.map((s, index) => {\r\n            return <InvoiceService {...s} index={index} onChangeService={onChangeService}\r\n                deleteService={deleteService} />\r\n        })\r\n    }, [services])\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <table className='invoiceServiceTable'>\r\n                <tr className='tableHeader'>\r\n                    <th>Services</th>\r\n                    <th />\r\n                    <th>Quantity</th>\r\n                    <th>Price</th>\r\n                    <th>Amount</th>\r\n                    <th />\r\n                </tr>\r\n                {servicesComp}\r\n                <tr className='addNewItemRow'>\r\n                    <td className='addNewItem' onClick={handleClick}>\r\n                        <Button sx={{ width: 135 }} startIcon={<AddCircleOutlineIcon />} aria-describedby={'jugal'}>\r\n                            Add new item\r\n                        </Button>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n            <LookUp handleClose={handleClose} anchorEl={anchorEl} onAddNewService={onAddNewService} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default InvoiceServiceWrapper;","import {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    Divider,\r\n    Grid,\r\n    Stack,\r\n    Typography,\r\n    Zoom,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState, useMemo, useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { blue } from \"../layout/ui/Theme\";\r\nimport InputField from \"../Atoms/form/InputField\";\r\nimport ReactToPrint from \"react-to-print\";\r\nimport \"../../App.css\";\r\nimport \"./styles.css\";\r\nimport InvoiceServiceWrapper from \"./InvoiceService\";\r\nimport { getCheckStatusIcon } from \"../../utils/utils\";\r\n\r\nconst Title = ({ name, sx = {}, variant = \"body1\", children }) => {\r\n    return (\r\n        <Typography sx={{ fontWeight: 700, ...sx }} variant={variant}>\r\n            {children || name}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nconst config = {\r\n    rowCellPadding: \"inherit\",\r\n    columns: [\r\n        {\r\n            id: 'serviceName',\r\n            label: 'Service'\r\n        },\r\n        {\r\n            id: 'quantity',\r\n            label: 'Quanity'\r\n        },\r\n        {\r\n            id: 'price',\r\n            label: 'Price'\r\n        },\r\n        {\r\n            id: 'amount',\r\n            label: 'Amount'\r\n        },\r\n    ]\r\n}\r\n\r\nconst DialogComponent = ({\r\n    transition,\r\n    handleClose,\r\n    open,\r\n    data,\r\n    pdf,\r\n    setPdf,\r\n    getTotal,\r\n    services,\r\n    addService,\r\n    onChangeService,\r\n    deleteService\r\n}) => {\r\n    const ref = React.useRef(null);\r\n    const {\r\n        brokerage = \"\",\r\n        loadNumber = \"\",\r\n        pickup = [],\r\n        drop = [],\r\n        rate = \"\",\r\n        accessorials = [],\r\n        proofDelivery = [],\r\n        rateConfirmation = [],\r\n        bucketFiles\r\n    } = data || {},\r\n        [{ receiverName = \"\" }] = drop || [],\r\n        [{ pickupAddress, pickupCity, pickupState, pickupZip }] = pickup;\r\n    console.log(bucketFiles)\r\n\r\n    const docFileViewer = React.useMemo(() => {\r\n        return bucketFiles && bucketFiles.map(doc => {\r\n            return (<div className=\"bucketImageContainer\">\r\n                <div>\r\n                    <img className=\"printThisFull\" src={doc.fileLocation} alt={doc.fileName} />\r\n                </div>\r\n            </div>)\r\n        })\r\n    }, [bucketFiles])\r\n\r\n\r\n\r\n    const reactToPrintContent = React.useCallback(() => {\r\n        return ref.current;\r\n    }, [ref.current]);\r\n\r\n\r\n    const reactToPrintTrigger = React.useCallback(() => {\r\n        // NOTE: could just as easily return <SomeComponent />. Do NOT pass an `onClick` prop\r\n        // to the root node of the returned component as it will be overwritten.\r\n\r\n        // Bad: the `onClick` here will be overwritten by `react-to-print`\r\n        // return <button onClick={() => alert('This will not work')}>Print this out!</button>;\r\n\r\n        // Good\r\n        return (\r\n            <Button className='printInvoice' variant={'contained'}>\r\n                Create Invoice\r\n            </Button>\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <Dialog\r\n            class=\"printThisFull\"\r\n            PaperProps={{\r\n                sx: { width: \"70%\" },\r\n            }}\r\n            open={open}\r\n            onClose={handleClose}\r\n            TransitionComponent={transition}\r\n            maxWidth={\"lg\"}\r\n        >\r\n            <DialogContent sx={{ p: 0 }}>\r\n                <div ref={ref} className=\"printArea\">\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        sx={{ display: pdf ? \"inline-flex\" : \"inline-flex\" }}\r\n                    >\r\n                        <style type=\"text/css\" media=\"print\">{\"\\\r\n               @page {\\ size: landscape;\\ }\\\r\n          \"}</style>\r\n                        <Grid item xs={12} sx={{ p: 3 }}>\r\n                            <Grid container justifyContent={\"space-between\"}>\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    <Stack spacing={1}>\r\n                                        <Stack>\r\n                                            <Typography sx={{ textAlign: \"left\" }} variant=\"h5\">\r\n                                                {'Sunny Freight'}\r\n                                            </Typography>\r\n                                        </Stack>\r\n                                    </Stack>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Stack>\r\n                                        <Stack>\r\n                                            <Typography variant=\"h5\" sx={{ textAlign: \"right\" }}>\r\n                                                Invoice\r\n                                            </Typography>\r\n                                        </Stack>\r\n                                        <Stack>\r\n                                            <InputField label=\"Notes\" type=\"textarea\" />\r\n                                        </Stack>\r\n                                    </Stack>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Divider sx={{ borderBottomWidth: \"thin\", borderColor: blue }} />\r\n                        <Grid xs={12} item>\r\n                            <Grid container justifyContent={\"space-between\"}>\r\n                                <Grid item>\r\n                                    <Stack spacing={1} sx={{ p: 3 }}>\r\n                                        <Stack>\r\n                                            <Typography>Bill To:</Typography>\r\n                                        </Stack>\r\n                                        <Stack>\r\n                                            <Title sx={{ fontWeight: 700 }}>{brokerage}</Title>\r\n                                        </Stack>\r\n                                    </Stack>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Stack justifyContent={\"space-between\"} sx={{ height: \"100%\" }}>\r\n                                        <Stack direction={\"row\"} alignItems={\"center\"} spacing={2} p={3}>\r\n                                            <Title>Load Number: </Title>\r\n                                            <Title>{loadNumber}</Title>\r\n                                        </Stack>\r\n                                    </Stack>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Divider sx={{ borderBottomWidth: \"thin\", borderColor: blue }} />\r\n\r\n                        <Grid item sx={{ p: 2 }} display={\"inherit\"} direction=\"column\">\r\n                            <Stack sx={{ textAlign: \"right\" }}>\r\n                                <Title>Total: {getTotal() || '- -'}</Title>\r\n                            </Stack>\r\n                            <Grid container alignItems={\"end\"} justifyContent={\"space-between\"}>\r\n                                <Grid item xs={12} className='invoiceServiceWrapperGrid'>\r\n                                    <InvoiceServiceWrapper\r\n                                        onChangeService={onChangeService} services={services} onAddNewService={addService}\r\n                                        deleteService={deleteService}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid xs={3} item>\r\n                                    {/* <Button variant={\"contained\"} size={\"small\"} className={'addServicesInvoice'}\r\n                                  onClick={addService}>\r\n                                  Add Services\r\n                              </Button> */}\r\n                                </Grid>\r\n                                <Grid xs={6} item>\r\n                                    <Stack justifyContent={\"center\"} gap={\"10px\"} className='stack_Uploaders'>\r\n                                        <Stack direction={\"row\"} justifyContent={'center'} gap={'10px'}>\r\n                                            <label htmlFor={'rateCon'}>\r\n                                                <Typography textAlign={'center'} sx={{\r\n                                                    width: 150,\r\n                                                    background: 'rgb(0, 123, 255)',\r\n                                                    color: '#FFF',\r\n                                                    borderRadius: '4px'\r\n                                                }}>Rate Con</Typography>\r\n                                                <input type={'file'} accept={'pdf'} id={'rateCon'} style={{ display: 'none' }} />\r\n                                            </label>\r\n                                            <div>\r\n                                                {getCheckStatusIcon(!!rateConfirmation.length)}\r\n                                            </div>\r\n                                        </Stack>\r\n                                        <Stack direction={\"row\"} justifyContent={'center'} gap={'10px'}>\r\n                                            <label htmlFor={'pod'}>\r\n                                                <Typography textAlign={'center'} sx={{\r\n                                                    width: 150,\r\n                                                    background: 'rgb(0, 123, 255)',\r\n                                                    color: '#FFF',\r\n                                                    borderRadius: '4px'\r\n                                                }}>\r\n                                                    Proof Of Delivery\r\n                                                </Typography>\r\n                                                <input type={'file'} accept={'pdf'} id={'pod'} style={{ display: 'none' }} />\r\n                                            </label>\r\n                                            <div>\r\n                                                {getCheckStatusIcon(!!proofDelivery.length)}\r\n                                            </div>\r\n                                        </Stack>\r\n                                        <Stack direction={\"row\"} justifyContent={'center'} gap={'10px'}>\r\n                                            <label htmlFor={'accessorials'}>\r\n                                                <Typography textAlign={'center'} sx={{\r\n                                                    width: 150,\r\n                                                    background: 'rgb(0, 123, 255)',\r\n                                                    color: '#FFF',\r\n                                                    borderRadius: '4px'\r\n                                                }}>Accessorials</Typography>\r\n                                                <input type={'file'} accept={'pdf'} id={'accessorials'} style={{ display: 'none' }} />\r\n                                            </label>\r\n                                            <div>\r\n                                                {getCheckStatusIcon(!!accessorials.length)}\r\n                                            </div>\r\n                                        </Stack>\r\n                                    </Stack>\r\n                                </Grid>\r\n                                <Grid xs={3} item display={\"flex\"} justifyContent={\"end\"}>\r\n                                    <ReactToPrint\r\n                                        content={reactToPrintContent}\r\n                                        documentTitle=\"Invoice\"\r\n                                        // onBeforeGetContent={handleOnBeforeGetContent}\r\n                                        // onBeforePrint={handleBeforePrint}\r\n                                        removeAfterPrint\r\n                                        trigger={reactToPrintTrigger}\r\n                                    />\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {docFileViewer}\r\n                </div>\r\n            </DialogContent>\r\n        </Dialog >\r\n    );\r\n};\r\n\r\nconst Invoice = ({ match: { params: { id = \"\" } = {} } = {}, history }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [pdf, setPdf] = useState(false);\r\n    const invoices = useSelector((state) => state.load.invoices.data) || [],\r\n        [services, setServices] = useState([]),\r\n        data = invoices.find((invoice) => invoice._id === id);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        handleClickOpen();\r\n    }, []);\r\n\r\n    const handleClose = (e, reason = \"\") => {\r\n        // if (reason === 'backdropClick') return\r\n        setOpen(false);\r\n    };\r\n\r\n    const addService = (service) => {\r\n        const { label, cost } = service;\r\n        let obj = {\r\n            serviceName: label,\r\n            description: '',\r\n            quantity: 1,\r\n            price: cost,\r\n            amount: cost\r\n        }\r\n        setServices([...services, obj])\r\n    }\r\n\r\n    const onChangeService = (index, { name, value }) => {\r\n        const row = services[index];\r\n        row[name] = value;\r\n        const clone = [...services];\r\n        clone[index] = row\r\n        setServices(clone);\r\n    }\r\n\r\n    const Transition = useMemo(() => {\r\n        return React.forwardRef(function Transition(props, ref) {\r\n            const history = useHistory();\r\n            return (\r\n                <Zoom\r\n                    ref={ref}\r\n                    {...props}\r\n                    onExited={() => {\r\n                        return history.goBack();\r\n                    }}\r\n                />\r\n            );\r\n        });\r\n    }, []);\r\n\r\n    const getTotal = useCallback(() => {\r\n        const total = services.reduce((acc, service) => parseFloat(service.price) + acc, 0)\r\n        return \"$\" + total.toFixed(2)\r\n    }, [services])\r\n\r\n    const deleteService = (index) => {\r\n        const data = services\r\n        data.splice(index, 1)\r\n        setServices([...data])\r\n    }\r\n\r\n    const createInvoice = async () => {\r\n        // const blob = await pdf(\r\n        //     <Document>\r\n        //         <Page size=\"A4\">\r\n        //             <View>\r\n        //                 jugal\r\n        //             </View>\r\n        //         </Page>\r\n        //     </Document>\r\n        // ).toBlob()\r\n        // console.log(blob)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <DialogComponent\r\n                open={open}\r\n                handleClose={handleClose}\r\n                transition={Transition}\r\n                data={data}\r\n                pdf={pdf}\r\n                setPdf={setPdf}\r\n                services={services}\r\n                addService={addService}\r\n                onChangeService={onChangeService}\r\n                getTotal={getTotal}\r\n                deleteService={deleteService}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Invoice;\r\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { resetLoadsSearch } from '../../actions/load.js';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { getInvoiceLoads } from \"../../actions/load\";\r\nimport EnhancedTable from \"../Atoms/table/Table\";\r\nimport { Link, Route, useRouteMatch } from \"react-router-dom\";\r\nimport Invoice from \"./NewInvoice\";\r\nimport moment from \"moment\";\r\nimport { getParsedLoadEquipment } from \"../../views/openBoard/constants\";\r\n\r\nconst useStyles = makeStyles({\r\n    TableContainer: {\r\n        borderBottom: \"none\"\r\n    },\r\n    loadSearchbar: {\r\n        textAlign: 'right',\r\n        paddingBottom: 10\r\n    },\r\n});\r\n\r\nexport default function InvoicesList({ setSelectedLoad, resetSearchField, listBarType, load_selected }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const {path} = useRouteMatch();\r\n    const [loading, setLoading] = useState(true);\r\n    const { page, limit, total } = useSelector(state => state.load.invoices);\r\n    const { role } = useSelector(state => state.auth.user);\r\n    console.log(role)\r\n    const invoices = useSelector(state => state.load.invoices.data);\r\n    const [modalEdit, enableEdit] = useState(false);\r\n    const [open, setOpen] = useState({ show: false, data: {} });\r\n    const loads = useSelector(state => state.load.loads);\r\n    const { loads: chLoads = [], totalCount } = useSelector(state => state.openBoard.chRobinsonLoads, shallowEqual);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n        }, 1000);\r\n        resetSearchField && resetSearchField();\r\n        dispatch(resetLoadsSearch(listBarType));\r\n        dispatch(getInvoiceLoads());\r\n        // dispatch(getCHLoads(true));\r\n        return () => {\r\n            resetSearchField && resetSearchField();\r\n            dispatch(resetLoadsSearch(listBarType));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(getInvoiceLoads());\r\n    }, [loads]);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        dispatch(getInvoiceLoads(newPage, limit));\r\n    };\r\n    const handleChangeRowsPerPage = (event) => {\r\n        const limit = event.target.value;\r\n        dispatch(getInvoiceLoads(0, limit));\r\n    };\r\n\r\n    const config = {\r\n        rowCellPadding: \"inherit\",\r\n        headerCellSx: { pt: 1, pb: 1 },\r\n        emptyMessage: 'No Invoices found',\r\n        page,\r\n        count: totalCount,\r\n        limit,\r\n        columns: [\r\n            {\r\n                id: 'loadNumber',\r\n                label: 'Load Number',\r\n            },\r\n            {\r\n                id: \"country\",\r\n                label: \"Pickup City/State\",\r\n                renderer: ({ row }) => {\r\n                    return (\r\n                        <Fragment>\r\n                            {row.pickup[0].pickupCity}, {row.pickup[0].pickupState}\r\n                        </Fragment>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                id: \"pickupDate\",\r\n                label: \"Pickup Date\",\r\n                renderer: ({ row }) => {\r\n                    let date = \"\";\r\n                    if (moment(row.pickUpByDate).isValid()) {\r\n                        date = moment(row.pickUpByDate).format(\"M/DD/YYYY\");\r\n                    }\r\n                    return <Fragment>{date}</Fragment>;\r\n                },\r\n            },\r\n            {\r\n                id: \"deliveryCountry\",\r\n                label: \"Delivery City/State\",\r\n                renderer: ({ row }) => {\r\n                    return (\r\n                        <Fragment>\r\n                            {row.drop[0].dropCity}, {row.drop[0].dropState}\r\n                        </Fragment>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                id: \"deliveryDate\",\r\n                label: \"Delivery Date\",\r\n                renderer: ({ row }) => {\r\n                    let date = \"\";\r\n                    if (moment(row.deliverBy).isValid()) {\r\n                        date = moment(row.deliverBy).format(\"M/DD/YYYY\");\r\n                    }\r\n                    return <Fragment>{date}</Fragment>;\r\n                },\r\n            },\r\n            {\r\n                id: \"equipment\",\r\n                label: \"Equipment\",\r\n                renderer: ({ row }) => {\r\n                    const { modesString = '', standard = '' } = getParsedLoadEquipment(row) || {}\r\n                    return (\r\n                        <Fragment>\r\n                            {modesString} {standard}\r\n                        </Fragment>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                id: \"weight\",\r\n                label: \"Weight\",\r\n                renderer: ({ row }) => {\r\n                    let { weight: { pounds = \"\" } = {} } = row || {};\r\n                    if (pounds) pounds = pounds + \" lbs\";\r\n                    return <Fragment>{pounds}</Fragment>;\r\n                },\r\n            },\r\n            {\r\n                id: \"company\",\r\n                label: \"Company\",\r\n                renderer: ({ row }) => {\r\n                    return row?.brokerage\r\n                },\r\n                emptyState: '--'\r\n            },\r\n            {\r\n                id: 'rate',\r\n                label: 'Rate',\r\n                emptyState: '--'\r\n            },\r\n            {\r\n                id: '',\r\n                label: 'Invoice',\r\n                visible: ['driver', 'admin', 'superAdmin', 'ownerOperator'].includes(role),\r\n                renderer: ({ row }) => {\r\n                    return <Button\r\n                        component={Link}\r\n                        to={path + '/' + row._id}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                    >\r\n                        Create Invoice\r\n                    </Button>\r\n                }\r\n            },\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <div className={classes.table}>\r\n            {/*{loading ? <Spinner/> : (*/}\r\n            <Fragment>\r\n                <EnhancedTable config={config} data={invoices} />\r\n                <Route path={path + '/:id'} component={Invoice} />\r\n                {/*<TablePagination*/}\r\n                {/*    rowsPerPageOptions={[5, 10, 15]}*/}\r\n                {/*    colSpan={3}*/}\r\n                {/*    count={+total}*/}\r\n                {/*    rowsPerPage={+limit}*/}\r\n                {/*    page={+page}*/}\r\n                {/*    SelectProps={{*/}\r\n                {/*        inputProps: {'aria-label': 'rows per page'},*/}\r\n                {/*        native: false,*/}\r\n                {/*    }}*/}\r\n                {/*    onChangePage={handleChangePage}*/}\r\n                {/*    onChangeRowsPerPage={handleChangeRowsPerPage}*/}\r\n                {/*/>*/}\r\n\r\n                {/*<LoadDetailModal*/}\r\n                {/*    modalEdit={true}*/}\r\n                {/*    open={!!open.show}*/}\r\n                {/*    load={open?.data}*/}\r\n                {/*    handleClose={() => {*/}\r\n                {/*        setOpen(false);*/}\r\n                {/*        enableEdit(false);*/}\r\n                {/*    }}*/}\r\n                {/*/>*/}\r\n            </Fragment>\r\n            {/*// )}*/}\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}